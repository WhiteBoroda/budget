<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>
        <!-- Server Action –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∏–ø–∞–º –±—é–¥–∂–µ—Ç—ñ–≤ -->
        <record id="action_auto_assign_budget_categories" model="ir.actions.server">
            <field name="name">üîß –ê–≤—Ç–æ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π</field>
            <field name="model_id" ref="model_budget_type"/>
            <field name="binding_model_id" ref="model_budget_type"/>
            <field name="binding_view_types">list,form</field>
            <field name="state">code</field>
            <field name="code">
# –ú–∞–ø–ø—ñ–Ω–≥ –∫–æ–¥—ñ–≤ —Ç–∏–ø—ñ–≤ –±—é–¥–∂–µ—Ç—ñ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (–í–ò–ü–†–ê–í–õ–ï–ù–û –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏)
mapping = {
    'BDR': 'administrative',     # –ë–î–† - —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π (—É–∑–∞–≥–∞–ª—å–Ω—é—é—á–∏–π)
    '01': 'direct_costs',        # –§–û–¢
    '01(2)': 'direct_costs',     # –§–û–¢ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π
    '02': 'indirect_costs',      # –†–æ–∑–≤–∏—Ç–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—É
    '03': 'indirect_costs',      # –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏
    '04': 'administrative',      # –ë–ª–∞–≥–æ–¥—ñ–π–Ω—ñ—Å—Ç—å
    '04(2)': 'administrative',   # –ë–ª–∞–≥–æ–¥—ñ–π–Ω—ñ—Å—Ç—å (–º–∞—Ä–∫–µ—Ç–∏–Ω–≥)
    '05': 'administrative',      # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥
    '06': 'administrative',      # –ü–æ–¥–∞—Ç–∫–∏
    '07': 'administrative',      # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
    '08': 'financial',           # –§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å
    '09': 'income',             # –î–æ—Ö–æ–¥–∏
    '10': 'indirect_costs',      # –û—Ä–µ–Ω–¥–∞
    '11': 'direct_costs',        # –õ–æ–≥—ñ—Å—Ç–∏–∫–∞
    '12': 'indirect_costs',      # –Ü–¢
    '13': 'direct_costs',        # –ö–æ–Ω—Ç—Ä–æ–ª—å —è–∫–æ—Å—Ç—ñ
    '14': 'administrative',      # –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–ª–∞—Å–Ω—ñ—Å—Ç—é
    '15': 'administrative',      # –Æ—Ä–∏–¥–∏—á–Ω—ñ —Ä–æ–∑—Ö–æ–¥–∏
    '16': 'administrative',      # –û—Ö–æ—Ä–æ–Ω–∞ –ø—Ä–∞—Ü—ñ
    '17': 'administrative',      # –ê–¥–º—ñ–Ω-–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫—ñ
    '18': 'indirect_costs',      # –ó–≤'—è–∑–æ–∫ —Ç–∞ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç
    '19': 'direct_costs',        # –ï–Ω–µ—Ä–≥–æ–Ω–æ—Å—ñ—ó
    '20': 'indirect_costs',      # –¢–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è
    '21': 'indirect_costs',      # –†–µ–º–æ–Ω—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
    '22': 'direct_costs',        # –ï–∫—Å–ø–ª—É–∞—Ç–∞—Ü—ñ—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
    '23': 'administrative',      # –Ü–Ω—à—ñ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ
    '24': 'investment',          # –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó
    '25': 'administrative',      # –ë–µ–∑–ø–µ–∫–∞
    '26': 'investment',          # –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–æ—ó –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ
    '27': 'administrative',      # –¢–û–ü –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
    '28': 'direct_costs',        # –ë–∞–ª–∞–Ω—Å –∑–µ—Ä–Ω–∞
    '29': 'direct_costs',        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–µ—Ä–µ—Ä–æ–±–∫–∏
    '30': 'direct_costs',        # –ë–∞–ª–∞–Ω—Å –º—É–∫–∏
    '31': 'administrative',      # –†–µ–∑–µ—Ä–≤
    '32': 'administrative',      # –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –ø–æ—Å–ª—É–≥–∏ —Ö–æ–ª–¥–∏–Ω–≥—É
    'PROD': 'direct_costs',      # –í–∏—Ä–æ–±–Ω–∏—á–∏–π
    'SALES': 'income',           # –ü—Ä–æ–¥–∞–∂—ñ
}

updated_count = 0
error_count = 0

if records:
    # –û–±—Ä–æ–±–ª—è—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ –∑–∞–ø–∏—Å–∏
    target_types = records
else:
    # –û–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ —Ç–∏–ø–∏ –±—é–¥–∂–µ—Ç—ñ–≤
    target_types = env['budget.type'].search([])

for budget_type in target_types:
    try:
        if budget_type.code in mapping:
            new_category = mapping[budget_type.code]
            if not budget_type.budget_category or budget_type.budget_category != new_category:
                budget_type.write({'budget_category': new_category})
                updated_count += 1
        elif not budget_type.budget_category:
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            budget_type.write({'budget_category': 'direct_costs'})
            updated_count += 1
    except Exception as e:
        error_count += 1
        continue

# –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
if error_count > 0:
    message = f'–û–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Ç–∏–ø—ñ–≤ –±—é–¥–∂–µ—Ç—ñ–≤. –ü–æ–º–∏–ª–æ–∫: {error_count}'
    msg_type = 'warning'
else:
    message = f'–£—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è {updated_count} —Ç–∏–ø—ñ–≤ –±—é–¥–∂–µ—Ç—ñ–≤'
    msg_type = 'success'

action = {
    'type': 'ir.actions.client',
    'tag': 'display_notification',
    'params': {
        'title': '–ê–≤—Ç–æ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
        'message': message,
        'type': msg_type,
    }
}
            </field>
        </record>

        <!-- Server Action –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö -->
        <record id="action_validate_budget_types" model="ir.actions.server">
            <field name="name">‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å</field>
            <field name="model_id" ref="model_budget_type"/>
            <field name="binding_model_id" ref="model_budget_type"/>
            <field name="binding_view_types">list</field>
            <field name="state">code</field>
            <field name="code">
# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ —Ç–∏–ø–∏ –±—é–¥–∂–µ—Ç—ñ–≤ –Ω–∞ —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å
issues = []
all_types = env['budget.type'].search([])

for budget_type in all_types:
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    if not budget_type.budget_category:
        issues.append(f"‚ùå –¢–∏–ø '{budget_type.name}' ({budget_type.code}) - –≤—ñ–¥—Å—É—Ç–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è")

    if not budget_type.code:
        issues.append(f"‚ùå –¢–∏–ø '{budget_type.name}' - –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–æ–¥")

    if not budget_type.name:
        issues.append(f"‚ùå –¢–∏–ø –∑ –∫–æ–¥–æ–º '{budget_type.code}' - –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞–∑–≤–∞")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ –∫–æ–¥—ñ–≤
codes = all_types.mapped('code')
duplicate_codes = [code for code in set(codes) if codes.count(code) > 1]
for code in duplicate_codes:
    duplicate_types = all_types.filtered(lambda t: t.code == code)
    issues.append(f"‚ö†Ô∏è –î—É–±–ª—å–æ–≤–∞–Ω–∏–π –∫–æ–¥ '{code}' —É —Ç–∏–ø—ñ–≤: {', '.join(duplicate_types.mapped('name'))}")

if issues:
    message = f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(issues)} –ø—Ä–æ–±–ª–µ–º:\n" + "\n".join(issues[:10])
    if len(issues) > 10:
        message += f"\n... —Ç–∞ —â–µ {len(issues) - 10} –ø—Ä–æ–±–ª–µ–º"
    msg_type = 'warning'
else:
    message = f"‚úÖ –í—Å—ñ {len(all_types)} —Ç–∏–ø—ñ–≤ –±—é–¥–∂–µ—Ç—ñ–≤ –ø—Ä–æ–π—à–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É"
    msg_type = 'success'

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤

action = {
    'type': 'ir.actions.client',
    'tag': 'display_notification',
    'params': {
        'title': '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        'message': message,
        'type': msg_type,
    }
}
            </field>
        </record>
    </data>
</odoo>