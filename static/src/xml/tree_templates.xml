<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">

    <!-- –û–°–ù–û–í–ù–ò–ô –®–ê–ë–õ–û–ù –î–ï–†–ï–í–ê -->
    <t t-name="budget.HierarchyTreeWidget" owl="1">
        <div class="hierarchy-tree-widget" t-att-class="state.loading ? 'loading' : ''">
            <div class="tree-header">
                <h4>üå≥ <t t-esc="props.title || '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó'"/></h4>
                <div class="tree-controls">
                    <button class="btn btn-sm btn-outline-secondary"
                            t-on-click="expandAll"
                            title="–†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ –≤—Å–µ">
                        ‚¨áÔ∏è –†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ –≤—Å–µ
                    </button>
                    <button class="btn btn-sm btn-outline-secondary"
                            t-on-click="collapseAll"
                            title="–ó–≥–æ—Ä–Ω—É—Ç–∏ –≤—Å–µ">
                        ‚¨ÜÔ∏è –ó–≥–æ—Ä–Ω—É—Ç–∏ –≤—Å–µ
                    </button>
                    <button class="btn btn-sm btn-outline-primary"
                            t-on-click="() => this.loadTreeData(true)"
                            title="–û–Ω–æ–≤–∏—Ç–∏">
                        üîÑ –û–Ω–æ–≤–∏—Ç–∏
                    </button>
                </div>
            </div>

            <div class="tree-container" t-if="!state.loading">
                <t t-foreach="state.treeData" t-as="node" t-key="node.id">
                    <t t-call="budget.TreeNode">
                        <t t-set="node" t-value="node"/>
                        <t t-set="level" t-value="0"/>
                    </t>
                </t>

                <div class="tree-empty" t-if="state.treeData.length === 0">
                    <div class="empty-icon">üå≥</div>
                    <h3>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Ä–æ–∂–Ω—è</h3>
                    <p>–î–æ–¥–∞–π—Ç–µ –¶–ë–û –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó</p>
                </div>
            </div>

            <div class="tree-loading" t-if="state.loading">
                <i class="fa fa-spinner fa-spin fa-2x"></i>
                <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏...</p>
            </div>
        </div>
    </t>

    <!-- –®–ê–ë–õ–û–ù –í–£–ó–õ–ê –î–ï–†–ï–í–ê -->
    <t t-name="budget.TreeNode" owl="1">
        <div class="tree-node"
             t-att-class="{
                 'selected': state.selectedNode === node.id,
                 'has-children': node.hasChildren,
                 'expanded': state.expandedNodes.has(node.id)
             }"
             t-att-data-level="level"
             t-att-data-node-id="node.id">

            <!-- –í—ñ–¥—Å—Ç—É–ø –¥–ª—è —Ä—ñ–≤–Ω—è -->
            <div class="tree-indent" t-att-style="'width: ' + (level * 20) + 'px'"></div>

            <!-- –ö–Ω–æ–ø–∫–∞ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è -->
            <div class="tree-toggle"
                 t-att-class="{'has-children': node.hasChildren}"
                 t-on-click="(ev) => this.toggleNode(node.id)">
                <t t-if="node.hasChildren">
                    <t t-if="state.expandedNodes.has(node.id)">‚ñº</t>
                    <t t-else="">‚ñ∂</t>
                </t>
            </div>

            <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –≤—É–∑–ª–∞ -->
            <div class="tree-content"
                 t-att-class="{'selected': state.selectedNode === node.id}"
                 t-on-click="(ev) => this.selectNode(node)"
                 t-on-dblclick="(ev) => this.openNode(node)">

                <!-- –Ü–∫–æ–Ω–∫–∞ -->
                <span class="tree-icon" t-esc="node.icon"/>

                <!-- –ù–∞–∑–≤–∞ -->
                <span class="tree-label" t-esc="node.name"/>

                <!-- –ö–æ–¥ -->
                <span class="tree-code" t-if="node.code">(<t t-esc="node.code"/>)</span>

                <!-- –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ -->
                <span class="tree-indicators">
                    <span class="budget-indicator" t-if="node.budget_count > 0">
                        <t t-esc="node.budget_count"/> üìä
                    </span>
                    <span class="children-indicator" t-if="node.child_count > 0">
                        <t t-esc="node.child_count"/> üè¢
                    </span>
                </span>
            </div>

            <!-- –î—ñ—ó -->
            <div class="tree-actions">
                <button class="btn-sm btn-outline-primary"
                        t-if="node.budget_count > 0"
                        t-on-click="(ev) => this.viewBudgets(node)"
                        title="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—é–¥–∂–µ—Ç–∏">
                    üìä
                </button>
                <button class="btn-sm btn-outline-success"
                        t-on-click="(ev) => this.createBudget(node)"
                        title="–°—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç">
                    ‚ûï
                </button>
            </div>

            <!-- –î–æ—á—ñ—Ä–Ω—ñ –≤—É–∑–ª–∏ -->
            <div class="tree-children" t-if="state.expandedNodes.has(node.id) and node.children">
                <t t-foreach="node.children" t-as="childNode" t-key="childNode.id">
                    <t t-call="budget.TreeNode">
                        <t t-set="node" t-value="childNode"/>
                        <t t-set="level" t-value="level + 1"/>
                    </t>
                </t>
            </div>
        </div>
    </t>

    <!-- –†–û–ó–®–ò–†–ï–ù–ò–ô –®–ê–ë–õ–û–ù –î–ï–†–ï–í–ê -->
    <t t-name="budget.AdvancedTreeWidget" owl="1">
        <div class="advanced-tree-widget"
             t-att-class="{
                 'loading': state.loading,
                 'drag-mode': state.isDragMode,
                 'view-mode-cards': state.viewMode === 'cards'
             }">

            <!-- –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ -->
            <div class="tree-toolbar">
                <div class="toolbar-left">
                    <!-- –ü–æ—à—É–∫ -->
                    <div class="search-container">
                        <input type="text"
                               class="tree-search form-control form-control-sm"
                               placeholder="üîç –ü–æ—à—É–∫ –≤ –¥–µ—Ä–µ–≤—ñ..."
                               t-model="state.searchQuery"
                               t-on-input="searchDebounced"/>
                        <i class="fa fa-search search-icon" t-if="!state.searchQuery"/>
                        <i class="fa fa-times search-clear"
                           t-if="state.searchQuery"
                           t-on-click="() => { state.searchQuery = ''; this._performSearch(); }"/>
                    </div>

                    <!-- –§—ñ–ª—å—Ç—Ä–∏ -->
                    <div class="filter-container">
                        <select class="form-control form-control-sm"
                                t-model="state.filterType"
                                t-on-change="() => this._performSearch()">
                            <option value="all">–í—Å—ñ –¶–ë–û</option>
                            <option value="with_budgets">–ó –±—é–¥–∂–µ—Ç–∞–º–∏</option>
                            <option value="without_budgets">–ë–µ–∑ –±—é–¥–∂–µ—Ç—ñ–≤</option>
                            <option value="holding">–•–æ–ª–¥–∏–Ω–≥–∏</option>
                            <option value="enterprise">–ü—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞</option>
                            <option value="department">–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∏</option>
                        </select>
                    </div>

                    <!-- –†–µ–∂–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è -->
                    <div class="view-mode-selector btn-group">
                        <button class="btn btn-sm"
                                t-att-class="state.viewMode === 'tree' ? 'btn-primary' : 'btn-outline-primary'"
                                t-on-click="() => this.setViewMode('tree')">
                            üå≥
                        </button>
                        <button class="btn btn-sm"
                                t-att-class="state.viewMode === 'cards' ? 'btn-primary' : 'btn-outline-primary'"
                                t-on-click="() => this.setViewMode('cards')">
                            üé¥
                        </button>
                        <button class="btn btn-sm"
                                t-att-class="state.viewMode === 'compact' ? 'btn-primary' : 'btn-outline-primary'"
                                t-on-click="() => this.setViewMode('compact')">
                            üìÑ
                        </button>
                    </div>
                </div>

                <div class="toolbar-right">
                    <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
                    <div class="tree-stats">
                        <span class="stat-item">
                            <i class="fa fa-sitemap"/>
                            <t t-esc="this._getTotalNodes()"/>
                        </span>
                        <span class="stat-item" t-if="state.selectedNodes.size > 0">
                            <i class="fa fa-check-square"/>
                            <t t-esc="state.selectedNodes.size"/>
                        </span>
                    </div>

                    <!-- –î—ñ—ó -->
                    <div class="tree-actions-group btn-group">
                        <button class="btn btn-sm btn-outline-secondary"
                                t-on-click="expandAll"
                                title="–†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ –≤—Å–µ">
                            <i class="fa fa-expand"/>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary"
                                t-on-click="collapseAll"
                                title="–ó–≥–æ—Ä–Ω—É—Ç–∏ –≤—Å–µ">
                            <i class="fa fa-compress"/>
                        </button>
                        <button class="btn btn-sm btn-outline-primary"
                                t-on-click="() => this.loadTreeData(true)"
                                title="–û–Ω–æ–≤–∏—Ç–∏">
                            <i class="fa fa-refresh"/>
                        </button>
                    </div>
                </div>
            </div>

            <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–µ—Ä–µ–≤–∞ -->
            <div class="tree-container"
                 t-ref="tree-container"
                 t-if="!state.loading">

                <!-- –î–µ—Ä–µ–≤–æ -->
                <div class="tree-content" t-if="state.viewMode === 'tree'">
                    <t t-foreach="state.treeData" t-as="node" t-key="node.id">
                        <t t-call="budget.AdvancedTreeNode">
                            <t t-set="node" t-value="node"/>
                            <t t-set="level" t-value="0"/>
                        </t>
                    </t>
                </div>

                <!-- –†–µ–∂–∏–º –∫–∞—Ä—Ç–æ–∫ -->
                <div class="cards-content" t-if="state.viewMode === 'cards'">
                    <div class="row">
                        <t t-foreach="state.treeData" t-as="node" t-key="node.id">
                            <t t-call="budget.TreeNodeCard">
                                <t t-set="node" t-value="node"/>
                            </t>
                        </t>
                    </div>
                </div>

                <!-- –ö–æ–º–ø–∞–∫—Ç–Ω–∏–π —Ä–µ–∂–∏–º -->
                <div class="compact-content" t-if="state.viewMode === 'compact'">
                    <table class="table table-sm table-hover">
                        <thead>
                            <tr>
                                <th>–ù–∞–∑–≤–∞</th>
                                <th>–¢–∏–ø</th>
                                <th>–ë—é–¥–∂–µ—Ç—ñ–≤</th>
                                <th>–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤</th>
                                <th>–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π</th>
                                <th>–î—ñ—ó</th>
                            </tr>
                        </thead>
                        <tbody>
                            <t t-foreach="this._getFlattenedNodes()" t-as="node" t-key="node.id">
                                <t t-call="budget.TreeNodeRow">
                                    <t t-set="node" t-value="node"/>
                                </t>
                            </t>
                        </tbody>
                    </table>
                </div>

                <!-- –ü–æ—Ä–æ–∂–Ω—ñ–π —Å—Ç–∞–Ω -->
                <div class="tree-empty-state" t-if="state.treeData.length === 0">
                    <div class="empty-content">
                        <div class="empty-icon">üå≥</div>
                        <h3>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Ä–æ–∂–Ω—è</h3>
                        <p t-if="state.searchQuery">–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º "<t t-esc="state.searchQuery"/>"</p>
                        <p t-else="">–î–æ–¥–∞–π—Ç–µ –¶–ë–û –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó</p>
                        <button class="btn btn-primary"
                                t-if="!state.searchQuery"
                                t-on-click="_createRootNode">
                            ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—à–µ –¶–ë–û
                        </button>
                        <button class="btn btn-secondary"
                                t-if="state.searchQuery"
                                t-on-click="() => { state.searchQuery = ''; this._performSearch(); }">
                            üîç –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ—à—É–∫
                        </button>
                    </div>
                </div>
            </div>

            <!-- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è -->
            <div class="tree-loading" t-if="state.loading">
                <div class="loading-content">
                    <i class="fa fa-spinner fa-spin fa-3x"></i>
                    <h4>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏...</h4>
                    <p>–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–µ—Ä–µ–≤–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó</p>
                </div>
            </div>

            <!-- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é -->
            <div class="context-menu"
                 t-if="state.showContextMenu"
                 t-att-style="'left: ' + state.contextMenuPosition.x + 'px; top: ' + state.contextMenuPosition.y + 'px'">
                <t t-call="budget.ContextMenu">
                    <t t-set="node" t-value="state.contextMenuNode"/>
                </t>
            </div>

            <!-- Overlay –¥–ª—è drag & drop -->
            <div class="drag-overlay" t-if="state.isDragMode">
                <div class="drag-instruction">
                    üéØ –ü–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
                </div>
            </div>
        </div>
    </t>

    <!-- –†–û–ó–®–ò–†–ï–ù–ò–ô –í–£–ó–û–õ –î–ï–†–ï–í–ê -->
    <t t-name="budget.AdvancedTreeNode" owl="1">
        <div class="tree-node advanced"
             t-att-class="{
                 'selected': state.selectedNodes.has(node.id),
                 'has-children': node.hasChildren,
                 'expanded': state.expandedNodes.has(node.id),
                 'draggable': settings.enableDragDrop,
                 'drag-over': state.dragOverNode === node.id
             }"
             t-att-data-level="level"
             t-att-data-node-id="node.id"
             t-att-draggable="settings.enableDragDrop"
             t-on-click="(ev) => this.selectNode(node.id, ev.ctrlKey)"
             t-on-dblclick="(ev) => this._openNodeForm(node)"
             t-on-contextmenu="(ev) => this.showContextMenu(ev, node.id)"
             t-on-dragstart="(ev) => this._handleDragStart(ev)"
             t-on-dragover="(ev) => this._handleDragOver(ev)"
             t-on-drop="(ev) => this._handleDrop(ev)">

            <!-- –õ—ñ–Ω—ñ—è –∑–≤'—è–∑–∫—É -->
            <div class="tree-line" t-if="level > 0"></div>

            <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –≤—É–∑–ª–∞ -->
            <div class="node-content" t-att-style="'padding-left: ' + (level * 24) + 'px'">
                <!-- –ö–Ω–æ–ø–∫–∞ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è -->
                <span class="node-toggle"
                      t-att-class="{'has-children': node.hasChildren, 'expanded': state.expandedNodes.has(node.id)}"
                      t-on-click.stop="(ev) => this.toggleNode(node.id)">
                    <i t-if="!node.hasChildren" class="fa fa-circle-o"/>
                    <i t-elif="state.expandedNodes.has(node.id)" class="fa fa-minus-square-o"/>
                    <i t-else="" class="fa fa-plus-square-o"/>
                </span>

                <!-- –Ü–∫–æ–Ω–∫–∞ —Ç–∞ –Ω–∞–∑–≤–∞ -->
                <div class="node-main">
                    <span class="node-icon"
                          t-att-style="node.tree_color ? 'color: ' + node.tree_color : ''">
                        <t t-esc="node.icon"/>
                    </span>

                    <span class="node-label" t-esc="node.name"/>

                    <span class="node-code" t-if="node.code">
                        (<t t-esc="node.code"/>)
                    </span>

                    <!-- Badges -->
                    <div class="node-badges">
                        <span class="badge badge-info" t-if="node.budget_count > 0">
                            <t t-esc="node.budget_count"/> üìä
                        </span>
                        <span class="badge badge-secondary" t-if="node.child_count > 0">
                            <t t-esc="node.child_count"/> üè¢
                        </span>
                        <span class="badge badge-success" t-if="node.performance_score > 80">
                            ‚≠ê <t t-esc="Math.round(node.performance_score)"/>%
                        </span>
                        <span class="badge badge-warning" t-if="node.performance_score &lt; 50 and node.performance_score > 0">
                            ‚ö†Ô∏è <t t-esc="Math.round(node.performance_score)"/>%
                        </span>
                    </div>
                </div>

                <!-- –î—ñ—ó -->
                <div class="node-actions">
                    <div class="btn-group btn-group-sm">
                        <button class="btn btn-outline-primary"
                                t-if="node.budget_count > 0"
                                t-on-click.stop="(ev) => this._viewBudgets(node)"
                                title="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—é–¥–∂–µ—Ç–∏">
                            <i class="fa fa-chart-bar"/>
                        </button>
                        <button class="btn btn-outline-success"
                                t-on-click.stop="(ev) => this._createBudget(node)"
                                title="–°—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç">
                            <i class="fa fa-plus"/>
                        </button>
                        <button class="btn btn-outline-info"
                                t-on-click.stop="(ev) => this._createChildNode(node)"
                                title="–î–æ–¥–∞—Ç–∏ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª">
                            <i class="fa fa-sitemap"/>
                        </button>
                    </div>
                </div>
            </div>

            <!-- –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É -->
            <div class="node-progress" t-if="node.budget_utilization > 0">
                <div class="progress progress-sm">
                    <div class="progress-bar"
                         t-att-class="{
                             'bg-success': node.budget_utilization >= 80,
                             'bg-warning': node.budget_utilization >= 50 and node.budget_utilization &lt; 80,
                             'bg-danger': node.budget_utilization &lt; 50
                         }"
                         t-att-style="'width: ' + node.budget_utilization + '%'"
                         t-att-title="'–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É: ' + node.budget_utilization + '%'">
                    </div>
                </div>
            </div>

            <!-- –î–æ—á—ñ—Ä–Ω—ñ –≤—É–∑–ª–∏ -->
            <div class="tree-children"
                 t-if="state.expandedNodes.has(node.id) and node.children and node.children.length > 0">
                <t t-foreach="node.children" t-as="childNode" t-key="childNode.id">
                    <t t-call="budget.AdvancedTreeNode">
                        <t t-set="node" t-value="childNode"/>
                        <t t-set="level" t-value="level + 1"/>
                    </t>
                </t>
            </div>
        </div>
    </t>

    <!-- –ö–ê–†–¢–ö–ê –í–£–ó–õ–ê -->
    <t t-name="budget.TreeNodeCard" owl="1">
        <div class="col-md-4 col-lg-3 mb-3">
            <div class="card tree-node-card"
                 t-att-class="{'selected': state.selectedNodes.has(node.id)}"
                 t-on-click="(ev) => this.selectNode(node.id, ev.ctrlKey)"
                 t-on-dblclick="(ev) => this._openNodeForm(node)">

                <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–∫–∏ -->
                <div class="card-header">
                    <h6 class="card-title mb-0">
                        <span class="node-icon" t-esc="node.icon"/>
                        <t t-esc="node.name"/>
                    </h6>
                    <span class="badge"
                          t-att-class="{
                              'badge-purple': node.cbo_type === 'holding',
                              'badge-primary': node.cbo_type === 'enterprise',
                              'badge-info': node.cbo_type === 'department',
                              'badge-secondary': true
                          }">
                        <t t-esc="node.cbo_type"/>
                    </span>
                </div>

                <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ä—Ç–∫–∏ -->
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-6">
                            <div class="metric">
                                <div class="metric-value text-primary">
                                    <t t-esc="node.budget_count"/>
                                </div>
                                <div class="metric-label">–ë—é–¥–∂–µ—Ç—ñ–≤</div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="metric">
                                <div class="metric-value text-info">
                                    <t t-esc="node.child_count"/>
                                </div>
                                <div class="metric-label">–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤</div>
                            </div>
                        </div>
                    </div>

                    <!-- –ü—Ä–æ–≥—Ä–µ—Å -->
                    <div class="mt-3" t-if="node.performance_score > 0">
                        <small class="text-muted">–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</small>
                        <div class="progress progress-sm">
                            <div class="progress-bar"
                                 t-att-class="{
                                     'bg-success': node.performance_score >= 80,
                                     'bg-warning': node.performance_score >= 50,
                                     'bg-danger': node.performance_score &lt; 50
                                 }"
                                 t-att-style="'width: ' + node.performance_score + '%'">
                            </div>
                        </div>
                        <small class="text-muted">
                            <t t-esc="Math.round(node.performance_score)"/>%
                        </small>
                    </div>

                    <!-- –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π -->
                    <div class="mt-2" t-if="node.responsible_user_name">
                        <small class="text-muted">
                            üë§ <t t-esc="node.responsible_user_name"/>
                        </small>
                    </div>
                </div>

                <!-- –î—ñ—ó –∫–∞—Ä—Ç–∫–∏ -->
                <div class="card-footer">
                    <div class="btn-group btn-group-sm w-100">
                        <button class="btn btn-outline-primary"
                                t-if="node.budget_count > 0"
                                t-on-click.stop="(ev) => this._viewBudgets(node)">
                            üìä –ë—é–¥–∂–µ—Ç–∏
                        </button>
                        <button class="btn btn-outline-success"
                                t-on-click.stop="(ev) => this._createBudget(node)">
                            ‚ûï –ë—é–¥–∂–µ—Ç
                        </button>
                        <button class="btn btn-outline-info"
                                t-on-click.stop="(ev) => this._createChildNode(node)">
                            üè¢ –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </t>

    <!-- –†–Ø–î–û–ö –¢–ê–ë–õ–ò–¶–Ü -->
    <t t-name="budget.TreeNodeRow" owl="1">
        <tr class="tree-node-row"
            t-att-class="{'selected': state.selectedNodes.has(node.id)}"
            t-on-click="(ev) => this.selectNode(node.id, ev.ctrlKey)"
            t-on-dblclick="(ev) => this._openNodeForm(node)">

            <td>
                <span t-att-style="'padding-left: ' + (node.depth_level * 16) + 'px'">
                    <span class="node-icon" t-esc="node.icon"/>
                    <t t-esc="node.name"/>
                    <small class="text-muted" t-if="node.code">
                        (<t t-esc="node.code"/>)
                    </small>
                </span>
            </td>

            <td>
                <span class="badge"
                      t-att-class="{
                          'badge-purple': node.cbo_type === 'holding',
                          'badge-primary': node.cbo_type === 'enterprise',
                          'badge-info': node.cbo_type === 'department',
                          'badge-secondary': true
                      }">
                    <t t-esc="node.cbo_type"/>
                </span>
            </td>

            <td class="text-center">
                <span class="badge badge-info" t-if="node.budget_count > 0">
                    <t t-esc="node.budget_count"/>
                </span>
                <span class="text-muted" t-else="">-</span>
            </td>

            <td class="text-center">
                <span class="badge badge-secondary" t-if="node.child_count > 0">
                    <t t-esc="node.child_count"/>
                </span>
                <span class="text-muted" t-else="">-</span>
            </td>

            <td>
                <small t-if="node.responsible_user_name">
                    üë§ <t t-esc="node.responsible_user_name"/>
                </small>
                <span class="text-muted" t-else="">-</span>
            </td>

            <td>
                <div class="btn-group btn-group-sm">
                    <button class="btn btn-outline-primary"
                            t-if="node.budget_count > 0"
                            t-on-click.stop="(ev) => this._viewBudgets(node)"
                            title="–ë—é–¥–∂–µ—Ç–∏">
                        üìä
                    </button>
                    <button class="btn btn-outline-success"
                            t-on-click.stop="(ev) => this._createBudget(node)"
                            title="–°—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç">
                        ‚ûï
                    </button>
                </div>
            </td>
        </tr>
    </t>

    <!-- –ö–û–ù–¢–ï–ö–°–¢–ù–ï –ú–ï–ù–Æ -->
    <t t-name="budget.ContextMenu" owl="1">
        <div class="context-menu-content">
            <div class="context-menu-header">
                <strong><t t-esc="node.name"/></strong>
                <small class="text-muted d-block"><t t-esc="node.code"/></small>
            </div>

            <div class="context-menu-separator"></div>

            <div class="context-menu-item"
                 t-on-click="(ev) => this.contextMenuAction('view')">
                <i class="fa fa-eye"/> –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏
            </div>

            <div class="context-menu-item"
                 t-on-click="(ev) => this.contextMenuAction('edit')">
                <i class="fa fa-edit"/> –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
            </div>

            <div class="context-menu-separator"></div>

            <div class="context-menu-item"
                 t-on-click="(ev) => this.contextMenuAction('create_child')">
                <i class="fa fa-plus"/> –î–æ–¥–∞—Ç–∏ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª
            </div>

            <div class="context-menu-item"
                 t-on-click="(ev) => this.contextMenuAction('create_budget')">
                <i class="fa fa-chart-bar"/> –°—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç
            </div>

            <div class="context-menu-item"
                 t-if="node.budget_count > 0"
                 t-on-click="(ev) => this.contextMenuAction('view_budgets')">
                <i class="fa fa-list"/> –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—é–¥–∂–µ—Ç–∏ (<t t-esc="node.budget_count"/>)
            </div>

            <div class="context-menu-separator"></div>

            <div class="context-menu-item"
                 t-on-click="(ev) => this.contextMenuAction('clone')">
                <i class="fa fa-copy"/> –ö–ª–æ–Ω—É–≤–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            </div>

            <div class="context-menu-item"
                 t-on-click="(ev) => this.contextMenuAction('export')">
                <i class="fa fa-download"/> –ï–∫—Å–ø–æ—Ä—Ç
            </div>

            <div class="context-menu-separator"></div>

            <div class="context-menu-item danger"
                 t-on-click="(ev) => this.contextMenuAction('delete')">
                <i class="fa fa-trash"/> –í–∏–¥–∞–ª–∏—Ç–∏
            </div>
        </div>
    </t>

    <!-- –®–ê–ë–õ–û–ù –°–¢–ê–¢–ò–°–¢–ò–ö–ò -->
    <t t-name="budget.TreeStats" owl="1">
        <div class="tree-stats-widget">
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-icon">üè¢</div>
                    <div class="stat-value" t-esc="props.stats.total_nodes"/>
                    <div class="stat-label">–ó–∞–≥–∞–ª–æ–º –¶–ë–û</div>
                </div>

                <div class="stat-card">
                    <div class="stat-icon">üí∞</div>
                    <div class="stat-value" t-esc="props.stats.total_budgets"/>
                    <div class="stat-label">–í—Å—å–æ–≥–æ –±—é–¥–∂–µ—Ç—ñ–≤</div>
                </div>

                <div class="stat-card">
                    <div class="stat-icon">‚úÖ</div>
                    <div class="stat-value" t-esc="props.stats.approved_budgets"/>
                    <div class="stat-label">–ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ</div>
                </div>

                <div class="stat-card">
                    <div class="stat-icon">üìä</div>
                    <div class="stat-value" t-esc="Math.round(props.stats.avg_performance)"/>%
                    <div class="stat-label">–°–µ—Ä–µ–¥–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</div>
                </div>
            </div>
        </div>
    </t>

</templates>