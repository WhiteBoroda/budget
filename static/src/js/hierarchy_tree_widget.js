/** @odoo-module **/

import { Component, useState, onMounted } from "@odoo/owl";
import { registry } from "@web/core/registry";
import { useService } from "@web/core/utils/hooks";

/**
 * –í—ñ–¥–∂–µ—Ç —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –¥–ª—è –¶–ë–û —Ç–∞ –±—é–¥–∂–µ—Ç—ñ–≤
 * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É —è–∫ —É Windows Explorer
 */
export class HierarchyTreeWidget extends Component {
    setup() {
        this.orm = useService("orm");
        this.action = useService("action");

        this.state = useState({
            treeData: [],
            expandedNodes: new Set(),
            selectedNode: null,
            loading: true,
        });

        onMounted(() => {
            this.loadTreeData();
        });
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–µ—Ä–µ–≤–∞ –∑ —Å–µ—Ä–≤–µ—Ä–∞
     */
    async loadTreeData() {
        try {
            this.state.loading = true;

            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¶–ë–û –∑ –±—é–¥–∂–µ—Ç–∞–º–∏
            const cboData = await this.orm.searchRead(
                "budget.responsibility.center",
                [["active", "=", true]],
                ["id", "name", "code", "cbo_type", "parent_id", "child_ids", "budget_count", "responsible_user_id"]
            );

            // –ë—É–¥—É—î–º–æ –¥–µ—Ä–µ–≤–æ
            this.state.treeData = this.buildTree(cboData);
            this.state.loading = false;

        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞:", error);
            this.state.loading = false;
        }
    }

    /**
     * –ü–æ–±—É–¥–æ–≤–∞ —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –∑ –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫—É
     */
    buildTree(flatData) {
        const itemsMap = new Map();
        const tree = [];

        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø—É –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        flatData.forEach(item => {
            itemsMap.set(item.id, {
                ...item,
                children: [],
                icon: this.getNodeIcon(item.cbo_type),
                expanded: false,
                hasChildren: item.child_ids && item.child_ids.length > 0
            });
        });

        // –ë—É–¥—É—î–º–æ —ñ—î—Ä–∞—Ä—Ö—ñ—é
        flatData.forEach(item => {
            const node = itemsMap.get(item.id);

            if (item.parent_id && item.parent_id[0]) {
                const parent = itemsMap.get(item.parent_id[0]);
                if (parent) {
                    parent.children.push(node);
                }
            } else {
                tree.push(node);
            }
        });

        return tree;
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø—É –¶–ë–û
     */
    getNodeIcon(cboType) {
        const icons = {
            'holding': 'üèõÔ∏è',
            'enterprise': 'üè≠',
            'business_direction': 'üè¢',
            'department': 'üè™',
            'division': 'üìÅ',
            'office': 'üè¨',
            'team': 'üë•',
            'project': 'üìä'
        };
        return icons[cboType] || 'üìÇ';
    }

    /**
     * –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è/–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –≤—É–∑–ª–∞
     */
    toggleNode(nodeId) {
        if (this.state.expandedNodes.has(nodeId)) {
            this.state.expandedNodes.delete(nodeId);
        } else {
            this.state.expandedNodes.add(nodeId);
        }
    }

    /**
     * –í–∏–±—ñ—Ä –≤—É–∑–ª–∞
     */
    selectNode(node) {
        this.state.selectedNode = node.id;

        // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–¥—ñ—é –≤–∏–±–æ—Ä—É
        this.props.onNodeSelect && this.props.onNodeSelect(node);
    }

    /**
     * –ü–æ–¥–≤—ñ–π–Ω–∏–π –∫–ª—ñ–∫ - –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–æ—Ä–º–∏ –¶–ë–û
     */
    async openNode(node) {
        await this.action.doAction({
            type: 'ir.actions.act_window',
            name: `–¶–ë–û: ${node.name}`,
            res_model: 'budget.responsibility.center',
            res_id: node.id,
            view_mode: 'form',
            target: 'current'
        });
    }

    /**
     * –ü–µ—Ä–µ–≥–ª—è–¥ –±—é–¥–∂–µ—Ç—ñ–≤ –¶–ë–û
     */
    async viewBudgets(node) {
        await this.action.doAction({
            type: 'ir.actions.act_window',
            name: `–ë—é–¥–∂–µ—Ç–∏: ${node.name}`,
            res_model: 'budget.plan',
            view_mode: 'tree,form',
            domain: [['cbo_id', '=', node.id]],
            context: { default_cbo_id: node.id }
        });
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –±—é–¥–∂–µ—Ç—É
     */
    async createBudget(node) {
        await this.action.doAction({
            type: 'ir.actions.act_window',
            name: `–ù–æ–≤–∏–π –±—é–¥–∂–µ—Ç –¥–ª—è ${node.name}`,
            res_model: 'budget.plan',
            view_mode: 'form',
            target: 'new',
            context: {
                default_cbo_id: node.id,
                default_state: 'draft'
            }
        });
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞
     */
    renderNode(node, level = 0) {
        const isExpanded = this.state.expandedNodes.has(node.id);
        const isSelected = this.state.selectedNode === node.id;
        const hasChildren = node.children && node.children.length > 0;

        return `
            <div class="tree-node" data-level="${level}">
                <!-- –õ—ñ–Ω—ñ—è –≤—ñ–¥—Å—Ç—É–ø—É -->
                <div class="tree-indent" style="width: ${level * 20}px;"></div>
                
                <!-- –ö–Ω–æ–ø–∫–∞ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è -->
                <div class="tree-toggle ${hasChildren ? 'has-children' : ''}" 
                     onclick="this.closest('.hierarchy-tree-widget').component.toggleNode(${node.id})">
                    ${hasChildren ? (isExpanded ? '‚ñº' : '‚ñ∂') : ''}
                </div>
                
                <!-- –Ü–∫–æ–Ω–∫–∞ —Ç–∞ –Ω–∞–∑–≤–∞ -->
                <div class="tree-content ${isSelected ? 'selected' : ''}"
                     onclick="this.closest('.hierarchy-tree-widget').component.selectNode(${JSON.stringify(node)})"
                     ondblclick="this.closest('.hierarchy-tree-widget').component.openNode(${JSON.stringify(node)})">
                    
                    <span class="tree-icon">${node.icon}</span>
                    <span class="tree-label">${node.name}</span>
                    <span class="tree-code">(${node.code})</span>
                    
                    <!-- –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –±—é–¥–∂–µ—Ç—ñ–≤ -->
                    ${node.budget_count > 0 ? `<span class="budget-indicator">${node.budget_count} üìä</span>` : ''}
                </div>
                
                <!-- –î—ñ—ó -->
                <div class="tree-actions">
                    ${node.budget_count > 0 ? 
                        `<button class="btn-sm btn-outline-primary" 
                                onclick="this.closest('.hierarchy-tree-widget').component.viewBudgets(${JSON.stringify(node)})"
                                title="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—é–¥–∂–µ—Ç–∏">üìä</button>` : ''}
                    
                    <button class="btn-sm btn-outline-success" 
                            onclick="this.closest('.hierarchy-tree-widget').component.createBudget(${JSON.stringify(node)})"
                            title="–°—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç">‚ûï</button>
                </div>
            </div>
            
            <!-- –î–æ—á—ñ—Ä–Ω—ñ –≤—É–∑–ª–∏ -->
            ${isExpanded && hasChildren ? 
                node.children.map(child => this.renderNode(child, level + 1)).join('') : ''}
        `;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∏–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    render() {
        if (this.state.loading) {
            return `
                <div class="hierarchy-tree-widget loading">
                    <div class="loading-spinner">
                        <i class="fa fa-spinner fa-spin"></i> –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏...
                    </div>
                </div>
            `;
        }

        return `
            <div class="hierarchy-tree-widget" data-component="this">
                <div class="tree-header">
                    <h4>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó</h4>
                    <div class="tree-controls">
                        <button class="btn btn-sm btn-outline-secondary" 
                                onclick="this.closest('.hierarchy-tree-widget').component.expandAll()">
                            –†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ –≤—Å–µ
                        </button>
                        <button class="btn btn-sm btn-outline-secondary"
                                onclick="this.closest('.hierarchy-tree-widget').component.collapseAll()">
                            –ó–≥–æ—Ä–Ω—É—Ç–∏ –≤—Å–µ
                        </button>
                        <button class="btn btn-sm btn-outline-primary"
                                onclick="this.closest('.hierarchy-tree-widget').component.loadTreeData()">
                            üîÑ –û–Ω–æ–≤–∏—Ç–∏
                        </button>
                    </div>
                </div>
                
                <div class="tree-container">
                    ${this.state.treeData.map(node => this.renderNode(node)).join('')}
                </div>
                
                ${this.state.treeData.length === 0 ? 
                    `<div class="tree-empty">
                        <p>üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ—Ä–æ–∂–Ω—è</p>
                        <p>–î–æ–¥–∞–π—Ç–µ –¶–ë–û –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞</p>
                    </div>` : ''}
            </div>
        `;
    }

    /**
     * –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤—É–∑–ª—ñ–≤
     */
    expandAll() {
        const expandNodes = (nodes) => {
            nodes.forEach(node => {
                if (node.hasChildren) {
                    this.state.expandedNodes.add(node.id);
                    if (node.children) {
                        expandNodes(node.children);
                    }
                }
            });
        };

        expandNodes(this.state.treeData);
    }

    /**
     * –ó–≥–æ—Ä—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤—É–∑–ª—ñ–≤
     */
    collapseAll() {
        this.state.expandedNodes.clear();
    }
}

HierarchyTreeWidget.template = "budget.HierarchyTreeWidget";

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—ñ–¥–∂–µ—Ç–∞
registry.category("fields").add("hierarchy_tree", HierarchyTreeWidget);

/**
 * –ë—é–¥–∂–µ—Ç–Ω–µ –¥–µ—Ä–µ–≤–æ –∑ –∫–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—î—é
 */
export class BudgetTreeWidget extends HierarchyTreeWidget {

    async loadTreeData() {
        try {
            this.state.loading = true;

            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±—é–¥–∂–µ—Ç–∏ –∑ –¶–ë–û
            const budgetData = await this.orm.searchRead(
                "budget.plan",
                [],
                ["id", "name", "cbo_id", "period_id", "budget_type_id", "state",
                 "total_planned_amount", "consolidation_level", "is_consolidated",
                 "parent_budget_id", "child_budget_ids"]
            );

            this.state.treeData = this.buildBudgetTree(budgetData);
            this.state.loading = false;

        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞:", error);
            this.state.loading = false;
        }
    }

    buildBudgetTree(budgetData) {
        // –ì—Ä—É–ø—É—î–º–æ –ø–æ consolidation_level —ñ cbo_id
        const tree = [];
        const itemsMap = new Map();

        budgetData.forEach(budget => {
            itemsMap.set(budget.id, {
                ...budget,
                children: [],
                icon: this.getBudgetIcon(budget.consolidation_level, budget.is_consolidated),
                expanded: false,
                hasChildren: budget.child_budget_ids && budget.child_budget_ids.length > 0
            });
        });

        // –ë—É–¥—É—î–º–æ —ñ—î—Ä–∞—Ä—Ö—ñ—é –±—é–¥–∂–µ—Ç—ñ–≤
        budgetData.forEach(budget => {
            const node = itemsMap.get(budget.id);

            if (budget.parent_budget_id && budget.parent_budget_id[0]) {
                const parent = itemsMap.get(budget.parent_budget_id[0]);
                if (parent) {
                    parent.children.push(node);
                }
            } else {
                tree.push(node);
            }
        });

        return tree;
    }

    getBudgetIcon(consolidationLevel, isConsolidated) {
        if (isConsolidated) {
            return consolidationLevel === 'holding' ? 'üèõÔ∏è' :
                   consolidationLevel === 'company' ? 'üè≠' : 'üìä';
        }
        return 'üí∞';
    }
}

registry.category("fields").add("budget_tree", BudgetTreeWidget);