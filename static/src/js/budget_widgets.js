/** @odoo-module **/
// static/src/js/budget_widgets.js
// JavaScript –≤–∏–¥–∂–µ—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –±—é–¥–∂–µ—Ç—É–≤–∞–Ω–Ω—è –≤ Odoo 17

import { Component, useState, onWillStart, xml } from "@odoo/owl";
import { registry } from "@web/core/registry";
import { useService } from "@web/core/utils/hooks";

// –í–∏–¥–∂–µ—Ç –ø–∞–Ω–µ–ª—ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±—é–¥–∂–µ—Ç–∞–º–∏
export class BudgetDashboardWidget extends Component {
    static template = xml`
        <div class="budget-dashboard-widget">
            <div t-if="state.loading" class="text-center">
                <i class="fa fa-spinner fa-spin"/>
                <span> –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</span>
            </div>
            
            <div t-else="" class="budget-dashboard-content">
                <div class="row">
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title">üìã –í—Å—å–æ–≥–æ –±—é–¥–∂–µ—Ç—ñ–≤</h5>
                                <h2 class="text-primary" t-esc="state.totalBudgets"/>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title">‚úÖ –ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ</h5>
                                <h2 class="text-success" t-esc="state.approvedBudgets"/>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title">‚è≥ –û—á—ñ–∫—É—é—Ç—å</h5>
                                <h2 class="text-warning" t-esc="state.pendingBudgets"/>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title">‚ö†Ô∏è –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ</h5>
                                <h2 class="text-danger" t-esc="state.overdueBudgets"/>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="mt-3 text-center">
                    <button class="btn btn-primary me-2" t-on-click="onViewBudgets">
                        üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –±—é–¥–∂–µ—Ç–∏
                    </button>
                    <button class="btn btn-secondary" t-on-click="onRefreshClick">
                        üîÑ –û–Ω–æ–≤–∏—Ç–∏
                    </button>
                </div>
            </div>
        </div>
    `;

    setup() {
        this.rpc = useService("rpc");
        this.notification = useService("notification");

        this.state = useState({
            totalBudgets: 0,
            approvedBudgets: 0,
            pendingBudgets: 0,
            overdueBudgets: 0,
            totalPlanned: 0,
            totalActual: 0,
            loading: true
        });

        onWillStart(async () => {
            await this.loadDashboardData();
        });
    }

    async loadDashboardData() {
        try {
            // –ü—Ä–æ—Å—Ç–∏–π –ø—ñ–¥—Ö—ñ–¥ –±–µ–∑ RPC –ø–æ–∫–∏ —â–æ
            this.state.totalBudgets = 10;
            this.state.approvedBudgets = 5;
            this.state.pendingBudgets = 3;
            this.state.overdueBudgets = 2;
            this.state.totalPlanned = 100000;
            this.state.totalActual = 85000;
            this.state.loading = false;
        } catch (error) {
            this.notification.add("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–∞–Ω–µ–ª—ñ", {
                type: "danger"
            });
            this.state.loading = false;
        }
    }

    async onRefreshClick() {
        this.state.loading = true;
        await this.loadDashboardData();
    }

    onViewBudgets() {
        this.env.services.action.doAction({
            type: 'ir.actions.act_window',
            name: '–í—Å—ñ –±—é–¥–∂–µ—Ç–∏',
            res_model: 'budget.plan',
            view_mode: 'kanban,tree,form',
            target: 'current'
        });
    }
}

// –í–∏–¥–∂–µ—Ç –ë–î–† Dashboard
export class BdrDashboardWidget extends Component {
    static template = xml`
        <div class="bdr-dashboard-widget">
            <div t-if="state.loading" class="text-center">
                <i class="fa fa-spinner fa-spin"/>
                <span> –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ë–î–†...</span>
            </div>
            
            <div t-else="" class="bdr-dashboard-content">
                <h3 class="text-center mb-4">üíº –ë—é–¥–∂–µ—Ç –¥–æ—Ö–æ–¥—ñ–≤ —ñ –≤–∏—Ç—Ä–∞—Ç (–ë–î–†)</h3>
                
                <div class="row">
                    <div class="col-md-4">
                        <div class="card text-center border-success">
                            <div class="card-body">
                                <h5 class="card-title">üí∞ –ó–∞–≥–∞–ª—å–Ω—ñ –¥–æ—Ö–æ–¥–∏</h5>
                                <h2 class="text-success" t-esc="state.totalIncome"/>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card text-center border-danger">
                            <div class="card-body">
                                <h5 class="card-title">üí∏ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏</h5>
                                <h2 class="text-danger" t-esc="state.totalExpenses"/>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card text-center border-info">
                            <div class="card-body">
                                <h5 class="card-title">üìà –ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫</h5>
                                <h2 class="text-info" t-esc="state.netProfit"/>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-3 text-center">
                    <button class="btn btn-primary me-2" t-on-click="onViewBdrWizard">
                        üßô‚Äç‚ôÇÔ∏è –ú–∞–π—Å—Ç–µ—Ä –ë–î–†
                    </button>
                    <button class="btn btn-secondary" t-on-click="onRefreshClick">
                        üîÑ –û–Ω–æ–≤–∏—Ç–∏
                    </button>
                </div>
            </div>
        </div>
    `;

    setup() {
        this.rpc = useService("rpc");
        this.notification = useService("notification");

        this.state = useState({
            totalIncome: 0,
            totalExpenses: 0,
            netProfit: 0,
            loading: true
        });

        onWillStart(async () => {
            await this.loadBdrData();
        });
    }

    async loadBdrData() {
        try {
            // –ü—Ä–æ—Å—Ç–∏–π –ø—ñ–¥—Ö—ñ–¥ –±–µ–∑ RPC –ø–æ–∫–∏ —â–æ
            this.state.totalIncome = 500000;
            this.state.totalExpenses = 350000;
            this.state.netProfit = 150000;
            this.state.loading = false;
        } catch (error) {
            this.notification.add("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ë–î–†", {
                type: "danger"
            });
            this.state.loading = false;
        }
    }

    async onRefreshClick() {
        this.state.loading = true;
        await this.loadBdrData();
    }

    onViewBdrWizard() {
        this.env.services.action.doAction({
            type: 'ir.actions.act_window',
            name: '–†–æ–±–æ—Ç–∞ –∑ –ë–î–†',
            res_model: 'bdr.budget.wizard',
            view_mode: 'form',
            target: 'new'
        });
    }
}

// –í–∏–¥–∂–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—É
export class BudgetProgressWidget extends Component {
    static template = xml`
        <div class="budget-progress-widget">
            <div class="progress-info d-flex justify-content-between mb-2">
                <span>–ü–ª–∞–Ω–æ–≤–æ: <t t-esc="props.planned or 0"/></span>
                <span>–§–∞–∫—Ç–∏—á–Ω–æ: <t t-esc="props.actual or 0"/></span>
                <span><t t-esc="executionPercent"/>%</span>
            </div>
            <div class="progress">
                <div class="progress-bar" 
                     t-att-class="progressBarClass"
                     t-att-style="'width: ' + executionPercent + '%'">
                </div>
            </div>
        </div>
    `;

    setup() {
        // –ü—Ä–æ—Å—Ç–∏–π –≤–∏–¥–∂–µ—Ç –±–µ–∑ —Å–∫–ª–∞–¥–Ω–æ—ó –ª–æ–≥—ñ–∫–∏
    }

    get executionPercent() {
        if (!this.props.planned) return 0;
        return Math.round((this.props.actual / this.props.planned) * 100);
    }

    get progressBarClass() {
        const percent = this.executionPercent;
        if (percent < 50) return "bg-danger";
        if (percent < 80) return "bg-warning";
        if (percent > 100) return "bg-info";
        return "bg-success";
    }
}

// –í–∏–¥–∂–µ—Ç —à–≤–∏–¥–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
export class QuickForecastWidget extends Component {
    static template = xml`
        <div class="quick-forecast-widget">
            <h5>üöÄ –®–≤–∏–¥–∫–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É</h5>
            <div class="text-center">
                <button class="btn btn-success" t-on-click="onCreateForecast">
                    ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑
                </button>
            </div>
        </div>
    `;

    setup() {
        this.notification = useService("notification");
    }

    async onCreateForecast() {
        this.notification.add("–§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ", {
            type: "info"
        });
    }
}

// –í–∏–¥–∂–µ—Ç –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
export class BudgetAnalyticsWidget extends Component {
    static template = xml`
        <div class="budget-analytics-widget">
            <h5>üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –±—é–¥–∂–µ—Ç—ñ–≤</h5>
            <div class="text-center text-muted">
                <p>–ì—Ä–∞—Ñ—ñ–∫ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–µ–∑–∞–±–∞—Ä–æ–º</p>
            </div>
        </div>
    `;

    setup() {
        // –ü—Ä–æ—Å—Ç–∏–π –≤–∏–¥–∂–µ—Ç
    }
}

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤–∏–¥–∂–µ—Ç—ñ–≤
registry.category("fields").add("budget_dashboard", BudgetDashboardWidget);
registry.category("fields").add("bdr_dashboard", BdrDashboardWidget);
registry.category("fields").add("budget_progress", BudgetProgressWidget);
registry.category("fields").add("quick_forecast", QuickForecastWidget);
registry.category("fields").add("budget_analytics", BudgetAnalyticsWidget);

// –£—Ç–∏–ª—ñ—Ç–∏
export const BudgetUtils = {
    formatCurrency(amount, currency = "UAH") {
        return new Intl.NumberFormat('uk-UA', {
            style: 'currency',
            currency: currency,
            minimumFractionDigits: 2
        }).format(amount);
    },

    getStatusBadge(state) {
        const badges = {
            'draft': { class: 'secondary', text: '–ß–µ—Ä–Ω–µ—Ç–∫–∞' },
            'planning': { class: 'primary', text: '–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è' },
            'coordination': { class: 'warning', text: '–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è' },
            'approved': { class: 'success', text: '–ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π' },
            'executed': { class: 'info', text: '–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è' },
            'closed': { class: 'dark', text: '–ó–∞–∫—Ä–∏—Ç–∏–π' }
        };
        return badges[state] || { class: 'secondary', text: state };
    }
};

// –ï–∫—Å–ø–æ—Ä—Ç —É—Ç–∏–ª—ñ—Ç—ñ–≤
window.BudgetUtils = BudgetUtils;