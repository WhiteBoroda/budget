/** @odoo-module **/
// –í—ñ–¥–∂–µ—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –±—é–¥–∂–µ—Ç—É–≤–∞–Ω–Ω—è - –ü–û–í–ù–Ü–°–¢–Æ –°–£–ú–Ü–°–ù–Ü –ó ODOO 17

import { Component, useState, onWillStart, xml } from "@odoo/owl";
import { registry } from "@web/core/registry";
import { useService } from "@web/core/utils/hooks";
import { formatCurrency } from "@web/core/utils/numbers";

/**
 * –í—ñ–¥–∂–µ—Ç –ø–∞–Ω–µ–ª—ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±—é–¥–∂–µ—Ç–∞–º–∏
 */
export class BudgetDashboardWidget extends Component {
    static template = xml`
        <div class="budget-dashboard-widget">
            <div t-if="state.loading" class="text-center p-4">
                <i class="fa fa-spinner fa-spin fa-2x text-primary"/>
                <div class="mt-2">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—é–¥–∂–µ—Ç—ñ–≤...</div>
            </div>
            
            <div t-else="" class="budget-dashboard-content">
                <div class="row g-3">
                    <!-- –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
                    <div class="col-md-3">
                        <div class="card border-primary">
                            <div class="card-body text-center">
                                <i class="fa fa-chart-line fa-2x text-primary mb-2"/>
                                <h5 class="card-title">–í—Å—å–æ–≥–æ –±—é–¥–∂–µ—Ç—ñ–≤</h5>
                                <h2 class="text-primary mb-0" t-esc="state.totalBudgets"/>
                                <small class="text-muted">–∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–ª–∞–Ω–∏</small>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-3">
                        <div class="card border-success">
                            <div class="card-body text-center">
                                <i class="fa fa-check-circle fa-2x text-success mb-2"/>
                                <h5 class="card-title">–ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ</h5>
                                <h2 class="text-success mb-0" t-esc="state.approvedBudgets"/>
                                <small class="text-muted">–≥–æ—Ç–æ–≤—ñ –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è</small>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-3">
                        <div class="card border-warning">
                            <div class="card-body text-center">
                                <i class="fa fa-clock-o fa-2x text-warning mb-2"/>
                                <h5 class="card-title">–û—á—ñ–∫—É—é—Ç—å</h5>
                                <h2 class="text-warning mb-0" t-esc="state.pendingBudgets"/>
                                <small class="text-muted">–Ω–∞ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ</small>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-3">
                        <div class="card border-danger">
                            <div class="card-body text-center">
                                <i class="fa fa-exclamation-triangle fa-2x text-danger mb-2"/>
                                <h5 class="card-title">–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ</h5>
                                <h2 class="text-danger mb-0" t-esc="state.overdueBudgets"/>
                                <small class="text-muted">–ø–æ—Ç—Ä–µ–±—É—é—Ç—å —É–≤–∞–≥–∏</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ -->
                <div class="row g-3 mt-3">
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">üí∞ –ü–ª–∞–Ω–æ–≤–∞ —Å—É–º–∞</h6>
                            </div>
                            <div class="card-body text-center">
                                <h3 class="text-primary" t-esc="state.formattedPlannedAmount"/>
                                <div class="progress mt-2">
                                    <div class="progress-bar bg-primary"
                                         t-att-style="'width: ' + state.plannedPercentage + '%'"/>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">‚úÖ –§–∞–∫—Ç–∏—á–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ</h6>
                            </div>
                            <div class="card-body text-center">
                                <h3 class="text-success" t-esc="state.formattedActualAmount"/>
                                <div class="progress mt-2">
                                    <div class="progress-bar bg-success"
                                         t-att-style="'width: ' + state.executionPercentage + '%'"/>
                                </div>
                                <small class="text-muted" t-esc="state.executionPercentage + '% –≤–∏–∫–æ–Ω–∞–Ω–Ω—è'"/>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">üí≥ –î–æ—Å—Ç—É–ø–Ω–æ</h6>
                            </div>
                            <div class="card-body text-center">
                                <h3 class="text-info" t-esc="state.formattedAvailableAmount"/>
                                <div class="progress mt-2">
                                    <div class="progress-bar bg-info"
                                         t-att-style="'width: ' + state.availablePercentage + '%'"/>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- –®–≤–∏–¥–∫—ñ –¥—ñ—ó -->
                <div class="row g-3 mt-3">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0">üöÄ –®–≤–∏–¥–∫—ñ –¥—ñ—ó</h6>
                            </div>
                            <div class="card-body">
                                <div class="d-flex flex-wrap gap-2">
                                    <button class="btn btn-primary" t-on-click="createBudget">
                                        <i class="fa fa-plus"/> –°—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç
                                    </button>
                                    <button class="btn btn-outline-secondary" t-on-click="viewAllBudgets">
                                        <i class="fa fa-list"/> –í—Å—ñ –±—é–¥–∂–µ—Ç–∏
                                    </button>
                                    <button class="btn btn-outline-info" t-on-click="viewReports">
                                        <i class="fa fa-chart-bar"/> –ó–≤—ñ—Ç–∏
                                    </button>
                                    <button class="btn btn-outline-success" t-on-click="refreshData">
                                        <i class="fa fa-refresh"/> –û–Ω–æ–≤–∏—Ç–∏
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;

    setup() {
        this.orm = useService("orm");
        this.action = useService("action");
        this.notification = useService("notification");

        this.state = useState({
            loading: true,
            totalBudgets: 0,
            approvedBudgets: 0,
            pendingBudgets: 0,
            overdueBudgets: 0,
            plannedAmount: 0,
            actualAmount: 0,
            availableAmount: 0,
            formattedPlannedAmount: "0",
            formattedActualAmount: "0",
            formattedAvailableAmount: "0",
            plannedPercentage: 0,
            executionPercentage: 0,
            availablePercentage: 0
        });

        onWillStart(async () => {
            await this.loadDashboardData();
        });
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è dashboard
     */
    async loadDashboardData() {
        try {
            this.state.loading = true;

            const data = await this.orm.call(
                "budget.plan",
                "get_dashboard_data",
                []
            );

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑ –æ—Ç—Ä–∏–º–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
            Object.assign(this.state, {
                totalBudgets: data.total_budgets || 0,
                approvedBudgets: data.approved_budgets || 0,
                pendingBudgets: data.pending_budgets || 0,
                overdueBudgets: data.overdue_budgets || 0,
                plannedAmount: data.planned_amount || 0,
                actualAmount: data.actual_amount || 0,
                availableAmount: data.available_amount || 0
            });

            // –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å—É–º–∏
            this.formatAmounts();
            this.calculatePercentages();

        } catch (error) {
            this.notification.add(
                "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è dashboard",
                { type: "danger" }
            );
            console.error("Dashboard loading error:", error);
        } finally {
            this.state.loading = false;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—É–º
     */
    formatAmounts() {
        this.state.formattedPlannedAmount = formatCurrency(this.state.plannedAmount);
        this.state.formattedActualAmount = formatCurrency(this.state.actualAmount);
        this.state.formattedAvailableAmount = formatCurrency(this.state.availableAmount);
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤
     */
    calculatePercentages() {
        const total = this.state.plannedAmount;
        if (total > 0) {
            this.state.executionPercentage = Math.round((this.state.actualAmount / total) * 100);
            this.state.availablePercentage = Math.round((this.state.availableAmount / total) * 100);
            this.state.plannedPercentage = 100;
        } else {
            this.state.executionPercentage = 0;
            this.state.availablePercentage = 0;
            this.state.plannedPercentage = 0;
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –±—é–¥–∂–µ—Ç—É
     */
    async createBudget() {
        return this.action.doAction({
            name: "–ù–æ–≤–∏–π –±—é–¥–∂–µ—Ç",
            type: "ir.actions.act_window",
            res_model: "budget.plan",
            view_mode: "form",
            views: [[false, "form"]],
            target: "new"
        });
    }

    /**
     * –ü–µ—Ä–µ–≥–ª—è–¥ –≤—Å—ñ—Ö –±—é–¥–∂–µ—Ç—ñ–≤
     */
    async viewAllBudgets() {
        return this.action.doAction({
            name: "–í—Å—ñ –±—é–¥–∂–µ—Ç–∏",
            type: "ir.actions.act_window",
            res_model: "budget.plan",
            view_mode: "tree,form",
            views: [[false, "tree"], [false, "form"]]
        });
    }

    /**
     * –ü–µ—Ä–µ–≥–ª—è–¥ –∑–≤—ñ—Ç—ñ–≤
     */
    async viewReports() {
        return this.action.doAction({
            name: "–ó–≤—ñ—Ç–∏ –ø–æ –±—é–¥–∂–µ—Ç–∞—Ö",
            type: "ir.actions.act_window",
            res_model: "budget.report",
            view_mode: "tree,form",
            views: [[false, "tree"], [false, "form"]]
        });
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
     */
    async refreshData() {
        await this.loadDashboardData();
        this.notification.add(
            "–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ",
            { type: "success" }
        );
    }
}

/**
 * –í—ñ–¥–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¶–ë–û
 */
export class CboStatsWidget extends Component {
    static template = xml`
        <div class="cbo-stats-widget">
            <div t-if="state.loading" class="text-center p-3">
                <i class="fa fa-spinner fa-spin"/>
                <span class="ms-2">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¶–ë–û...</span>
            </div>
            
            <div t-else="" class="cbo-stats-content">
                <div class="row g-2">
                    <div class="col-md-6">
                        <div class="stat-card">
                            <div class="stat-icon">üè¢</div>
                            <div class="stat-content">
                                <div class="stat-value" t-esc="state.totalCbos"/>
                                <div class="stat-label">–í—Å—å–æ–≥–æ –¶–ë–û</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="stat-card">
                            <div class="stat-icon">üìä</div>
                            <div class="stat-content">
                                <div class="stat-value" t-esc="state.activeBudgets"/>
                                <div class="stat-label">–ê–∫—Ç–∏–≤–Ω–∏—Ö –±—é–¥–∂–µ—Ç—ñ–≤</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;

    setup() {
        this.orm = useService("orm");

        this.state = useState({
            loading: true,
            totalCbos: 0,
            activeBudgets: 0
        });

        onWillStart(async () => {
            await this.loadStats();
        });
    }

    async loadStats() {
        try {
            const data = await this.orm.call(
                "budget.responsibility.center",
                "get_stats_summary",
                []
            );

            this.state.totalCbos = data.total_cbos || 0;
            this.state.activeBudgets = data.active_budgets || 0;
        } catch (error) {
            console.error("CBO stats loading error:", error);
        } finally {
            this.state.loading = false;
        }
    }
}

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—ñ–¥–∂–µ—Ç—ñ–≤
registry.category("fields").add("budget_dashboard_widget", BudgetDashboardWidget);
registry.category("fields").add("cbo_stats_widget", CboStatsWidget);