# -*- coding: utf-8 -*-

import base64
import io
import logging
from datetime import datetime, date
from odoo import models, fields, api
from odoo.exceptions import UserError

_logger = logging.getLogger(__name__)

try:
    import openpyxl
    from openpyxl import Workbook, load_workbook
    from openpyxl.styles import Font, Alignment, Border, Side, PatternFill

    OPENPYXL_AVAILABLE = True
except ImportError:
    OPENPYXL_AVAILABLE = False


class InvestmentBudgetWizard(models.TransientModel):
    """–ú–∞—Å—Ç–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –±—é–¥–∂–µ—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ö –•–ª–µ–±–æ–¥–∞—Ä"""
    _name = 'investment.budget.wizard'
    _description = '–ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤'

    operation_type = fields.Selection([
        ('import', '–ò–º–ø–æ—Ä—Ç –∏–∑ Excel'),
        ('export', '–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel'),
        ('sync', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è')
    ], '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏', required=True, default='import')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–º–ø–æ—Ä—Ç–∞
    import_file = fields.Binary('Excel —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞')
    filename = fields.Char('–ò–º—è —Ñ–∞–π–ª–∞')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
    period_id = fields.Many2one('budget.period', '–ü–µ—Ä–∏–æ–¥', required=True)
    company_ids = fields.Many2many('res.company', string='–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è')
    include_all_companies = fields.Boolean('–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è', default=True)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞
    sheet_name = fields.Char('–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞', default='–ë—é–¥–∂–µ—Ç 24')
    include_history = fields.Boolean('–í–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', default=True)
    currency_display = fields.Selection([
        ('thousands', '—Ç—ã—Å. –≥—Ä–Ω'),
        ('units', '–≥—Ä–Ω'),
        ('thousands_usd', '—Ç—ã—Å. USD')
    ], '–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã', default='thousands')

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    result_file = fields.Binary('–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª', readonly=True)
    result_filename = fields.Char('–ò–º—è —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞', readonly=True)
    import_summary = fields.Text('–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞', readonly=True)

    def action_import_investment_budget(self):
        """–ò–º–ø–æ—Ä—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –∏–∑ Excel"""
        if not self.import_file:
            raise UserError('–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª!')

        try:
            # –ü–∞—Ä—Å–∏–º Excel —Ñ–∞–π–ª
            projects_data = self._parse_investment_excel()

            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç
            budget_type = self.env['budget.type'].search([('code', '=', '24')], limit=1)
            if not budget_type:
                raise UserError('–¢–∏–ø –±—é–¥–∂–µ—Ç–∞ "24 - –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π" –Ω–µ –Ω–∞–π–¥–µ–Ω!')

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¶–ë–û –≥—Ä—É–ø–ø—ã –∫–æ–º–ø–∞–Ω–∏–π
            holding_cbo = self.env['budget.responsibility.center'].search([
                ('cbo_type', '=', 'holding')
            ], limit=1)

            if not holding_cbo:
                raise UserError('–¶–ë–û —Ö–æ–ª–¥–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')

            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç
            budget = self.env['budget.plan'].create({
                'period_id': self.period_id.id,
                'budget_type_id': budget_type.id,
                'cbo_id': holding_cbo.id,
                'responsible_user_id': self.env.user.id,
                'state': 'draft',
                'notes': f'–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞: {self.filename}'
            })

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –±—é–¥–∂–µ—Ç–Ω—ã–µ –ª–∏–Ω–∏–∏
            imported_projects = 0
            total_amount = 0

            for project_data in projects_data:
                project = self._create_investment_project(project_data)
                budget_line = self._create_budget_line_from_project(budget, project, project_data)
                imported_projects += 1
                total_amount += project_data.get('total_amount', 0)

            self.import_summary = f"""
–ò–º–ø–æ—Ä—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {imported_projects}
- –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.2f} —Ç—ã—Å.–≥—Ä–Ω
- –ë—é–¥–∂–µ—Ç ID: {budget.id}
- –°—Ç–∞—Ç—É—Å: {budget.state}

üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤:
- –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: {len([p for p in projects_data if p.get('level') == 1])}
- –ü–æ–¥–ø—Ä–æ–µ–∫—Ç—ã: {len([p for p in projects_data if p.get('level') > 1])}

‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é!
            """

            return {
                'type': 'ir.actions.act_window',
                'name': '–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç',
                'res_model': 'budget.plan',
                'res_id': budget.id,
                'view_mode': 'form',
                'target': 'current'
            }

        except Exception as e:
            raise UserError(f'–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}')

    def action_export_investment_budget(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤ –≤ Excel"""
        if not OPENPYXL_AVAILABLE:
            raise UserError('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!')

        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—é–¥–∂–µ—Ç–æ–≤
            budget_data = self._collect_investment_budget_data()

            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
            excel_file = self._create_investment_excel(budget_data)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            filename = f"–ò–Ω–≤–µ—Å—Ç_–ì–ö_{self.period_id.name}_{datetime.now().strftime('%Y%m%d')}.xlsx"
            self.result_file = base64.b64encode(excel_file)
            self.result_filename = filename

            return {
                'type': 'ir.actions.act_window',
                'res_model': 'investment.budget.wizard',
                'res_id': self.id,
                'view_mode': 'form',
                'target': 'new',
                'context': {'show_result': True}
            }

        except Exception as e:
            raise UserError(f'–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}')

    def _parse_investment_excel(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞"""
        file_content = base64.b64decode(self.import_file)
        file_stream = io.BytesIO(file_content)

        workbook = load_workbook(file_stream, data_only=True)
        worksheet = workbook['–ë—é–¥–∂–µ—Ç 24']  # –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç

        projects_data = []
        current_row = 8  # –ù–∞—á–∏–Ω–∞–µ–º —Å 8 —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)

        while current_row <= worksheet.max_row:
            project_data = self._parse_project_row(worksheet, current_row)
            if project_data:
                projects_data.append(project_data)
            current_row += 1

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            if current_row > 1000:
                break

        return projects_data

    def _parse_project_row(self, worksheet, row_num):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            project_num = worksheet[f'A{row_num}'].value
            project_name = worksheet[f'B{row_num}'].value
            total_amount = worksheet[f'C{row_num}'].value
            paid_2023 = worksheet[f'D{row_num}'].value or 0
            paid_2024 = worksheet[f'E{row_num}'].value or 0
            remaining = worksheet[f'F{row_num}'].value or 0

            if not project_name:
                return None

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É
            level = 1
            if isinstance(project_num, str):
                if '.' in project_num:
                    level = project_num.count('.') + 1

            # –ú–µ—Å—è—á–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ (–∫–æ–ª–æ–Ω–∫–∏ G-R)
            monthly_amounts = {}
            months = ['january', 'february', 'march', 'april', 'may', 'june',
                      'july', 'august', 'september', 'october', 'november', 'december']

            for i, month in enumerate(months):
                col_letter = chr(ord('G') + i)  # G, H, I, ...
                amount = worksheet[f'{col_letter}{row_num}'].value or 0
                monthly_amounts[month] = float(amount) if amount else 0

            return {
                'project_number': project_num,
                'name': str(project_name).strip(),
                'total_amount': float(total_amount) if total_amount else 0,
                'paid_2023': float(paid_2023),
                'paid_2024': float(paid_2024),
                'remaining_amount': float(remaining),
                'monthly_amounts': monthly_amounts,
                'level': level,
                'row_number': row_num
            }

        except Exception as e:
            _logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ {row_num}: {e}")
            return None

    def _create_investment_project(self, project_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç –≤ –º–æ–¥—É–ª–µ project
        project = self.env['project.project'].create({
            'name': project_data['name'],
            'is_sales_project': False,  # –≠—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
            'partner_id': self.env.company.partner_id.id,
            'company_id': self.env.company.id,
            'date_start': self.period_id.date_start,
            'description': f"""
–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏–∑ –±—é–¥–∂–µ—Ç–∞
–ù–æ–º–µ—Ä: {project_data.get('project_number', 'N/A')}
–û–±—â–∞—è —Å—É–º–º–∞: {project_data['total_amount']:,.2f} —Ç—ã—Å.–≥—Ä–Ω
–û–ø–ª–∞—á–µ–Ω–æ –≤ 2023: {project_data['paid_2023']:,.2f} —Ç—ã—Å.–≥—Ä–Ω
–û–ø–ª–∞—á–µ–Ω–æ –≤ 2024: {project_data['paid_2024']:,.2f} —Ç—ã—Å.–≥—Ä–Ω
–û—Å—Ç–∞—Ç–æ–∫: {project_data['remaining_amount']:,.2f} —Ç—ã—Å.–≥—Ä–Ω
            """
        })

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ —Å –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–º–∏ —Å—É–º–º–∞–º–∏
        for month, amount in project_data['monthly_amounts'].items():
            if amount > 0:
                self.env['project.task'].create({
                    'name': f"{project_data['name']} - {month.title()}",
                    'project_id': project.id,
                    'description': f"–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è —Å—É–º–º–∞: {amount:,.2f} —Ç—ã—Å.–≥—Ä–Ω",
                    'company_id': self.env.company.id,
                })

        return project

    def _create_budget_line_from_project(self, budget, project, project_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        return self.env['budget.plan.line'].create({
            'plan_id': budget.id,
            'description': project_data['name'],
            'project_id': project.id,
            'planned_amount': project_data['total_amount'] * 1000,  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≥—Ä–Ω
            'quantity': 1,
            'unit_price': project_data['total_amount'] * 1000,
            'calculation_method': 'manual',
            'calculation_basis': f"–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç {project_data.get('project_number', '')}",
            'notes': f"–û—Å—Ç–∞—Ç–æ–∫ –∫ –¥–æ–ø–ª–∞—Ç–µ: {project_data['remaining_amount']:,.2f} —Ç—ã—Å.–≥—Ä–Ω"
        })

    def _collect_investment_budget_data(self):
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        budget_type = self.env['budget.type'].search([('code', '=', '24')], limit=1)

        domain = [
            ('period_id', '=', self.period_id.id),
            ('budget_type_id', '=', budget_type.id),
            ('state', 'in', ['approved', 'executed'])
        ]

        if not self.include_all_companies:
            domain.append(('company_id', 'in', self.company_ids.ids))

        budgets = self.env['budget.plan'].search(domain)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º –∏ –ø—Ä–æ–µ–∫—Ç–∞–º
        companies_data = {}

        for budget in budgets:
            company_key = budget.company_id.name
            if company_key not in companies_data:
                companies_data[company_key] = {
                    'company': budget.company_id,
                    'total_amount': 0,
                    'projects': []
                }

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –ª–∏–Ω–∏–π
            for line in budget.line_ids:
                if line.project_id:
                    project_data = self._extract_project_data(line)
                    companies_data[company_key]['projects'].append(project_data)
                    companies_data[company_key]['total_amount'] += project_data['total_amount']

        return companies_data

    def _extract_project_data(self, budget_line):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –±—é–¥–∂–µ—Ç–Ω–æ–π –ª–∏–Ω–∏–∏"""
        project = budget_line.project_id

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—è—á–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É –∏–∑ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞
        monthly_amounts = {month: 0 for month in [
            'january', 'february', 'march', 'april', 'may', 'june',
            'july', 'august', 'september', 'october', 'november', 'december'
        ]}

        # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        monthly_amount = budget_line.planned_amount / 12000  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ç—ã—Å.–≥—Ä–Ω –∏ –¥–µ–ª–∏–º –Ω–∞ 12
        for month in monthly_amounts:
            monthly_amounts[month] = monthly_amount

        return {
            'name': budget_line.description,
            'total_amount': budget_line.planned_amount / 1000,  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ç—ã—Å.–≥—Ä–Ω
            'paid_2023': 0,  # –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            'paid_2024': budget_line.actual_amount / 1000,
            'remaining_amount': (budget_line.planned_amount - budget_line.actual_amount) / 1000,
            'monthly_amounts': monthly_amounts,
            'project_number': project.id if project else '',
        }

    def _create_investment_excel(self, companies_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ö –•–ª–µ–±–æ–¥–∞—Ä"""
        workbook = Workbook()
        worksheet = workbook.active
        worksheet.title = self.sheet_name

        # –°—Ç–∏–ª–∏
        header_font = Font(bold=True, size=12)
        border = Border(left=Side(style='thin'), right=Side(style='thin'),
                        top=Side(style='thin'), bottom=Side(style='thin'))

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        worksheet['A1'] = f'–ú–µ—Å—è—Ü –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:'
        worksheet['B1'] = self.period_id.name
        worksheet['D1'] = '–°—É–º–º–∞ –≤—Å–µ—Ö –±—é–¥–∂–µ—Ç–æ–≤'

        total_sum = sum(data['total_amount'] for data in companies_data.values())
        worksheet['E1'] = total_sum

        worksheet['A2'] = '—Ç—ã—Å. –≥—Ä–Ω. —Å –ù–î–°'

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        headers = [
            '‚Ññ –ø–ø', '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', '–°—É–º–º–∞ –ø—Ä–æ–µ–∫—Ç–∞',
            '–û–ø–ª–∞—á–µ–Ω–æ –≤ 2023 –≥–æ–¥—É', '–û–ø–ª–∞—á–µ–Ω–æ –≤ 2024 –≥–æ–¥—É', '–û—Å—Ç–∞—Ç–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π',
            '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
            '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
        ]

        for col, header in enumerate(headers, 1):
            cell = worksheet.cell(row=3, column=col)
            cell.value = header
            cell.font = header_font
            cell.border = border

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        current_row = 4

        for company_name, company_data in companies_data.items():
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–ø–∞–Ω–∏–∏
            worksheet.cell(row=current_row, column=1, value=company_name).font = header_font
            worksheet.cell(row=current_row, column=3, value=company_data['total_amount'])
            current_row += 1

            # –ü—Ä–æ–µ–∫—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏
            for i, project in enumerate(company_data['projects'], 1):
                worksheet.cell(row=current_row, column=1, value=f"{i}.")
                worksheet.cell(row=current_row, column=2, value=project['name'])
                worksheet.cell(row=current_row, column=3, value=project['total_amount'])
                worksheet.cell(row=current_row, column=4, value=project['paid_2023'])
                worksheet.cell(row=current_row, column=5, value=project['paid_2024'])
                worksheet.cell(row=current_row, column=6, value=project['remaining_amount'])

                # –ú–µ—Å—è—á–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞
                for col, month in enumerate(['january', 'february', 'march', 'april', 'may', 'june',
                                             'july', 'august', 'september', 'october', 'november', 'december'], 7):
                    worksheet.cell(row=current_row, column=col, value=project['monthly_amounts'][month])

                current_row += 1

            current_row += 1  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∫–æ–º–ø–∞–Ω–∏—è–º–∏

        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for column in worksheet.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            worksheet.column_dimensions[column_letter].width = adjusted_width

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        excel_buffer = io.BytesIO()
        workbook.save(excel_buffer)
        excel_buffer.seek(0)

        return excel_buffer.read()