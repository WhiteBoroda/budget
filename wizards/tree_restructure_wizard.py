# -*- coding: utf-8 -*-

from odoo import models, fields, api, _
from odoo.exceptions import UserError, ValidationError


class TreeRestructureWizard(models.TransientModel):
    """Wizard –¥–ª—è —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—ó –¥–µ—Ä–µ–≤–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó"""
    _name = 'tree.restructure.wizard'
    _description = '–ú–∞–π—Å—Ç–µ—Ä —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—ó –¥–µ—Ä–µ–≤–∞'

    operation_type = fields.Selection([
        ('move_subtree', '–ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –ø—ñ–¥–¥–µ—Ä–µ–≤–æ'),
        ('merge_nodes', '–û–±\'—î–¥–Ω–∞—Ç–∏ –≤—É–∑–ª–∏'),
        ('split_node', '–†–æ–∑–¥—ñ–ª–∏—Ç–∏ –≤—É–∑–æ–ª'),
        ('optimize_structure', '–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É'),
        ('bulk_update', '–ú–∞—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è')
    ], '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó', required=True, default='move_subtree')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
    source_cbo_id = fields.Many2one('budget.responsibility.center', '–î–∂–µ—Ä–µ–ª–æ (—â–æ –ø–µ—Ä–µ–º—ñ—â—É—î–º–æ)')
    target_parent_id = fields.Many2one('budget.responsibility.center', '–ù–æ–≤–∏–π –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –¶–ë–û')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è
    primary_cbo_id = fields.Many2one('budget.responsibility.center', '–û—Å–Ω–æ–≤–Ω–∏–π –¶–ë–û (–∑–∞–ª–∏—à–∏—Ç—å—Å—è)')
    secondary_cbo_ids = fields.Many2many('budget.responsibility.center',
                                         'wizard_secondary_cbo_rel',
                                         string='–¶–ë–û –¥–ª—è –æ–±\'—î–¥–Ω–∞–Ω–Ω—è (–±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ)')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è
    split_cbo_id = fields.Many2one('budget.responsibility.center', '–¶–ë–û –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è')
    new_cbo_names = fields.Text('–ù–∞–∑–≤–∏ –Ω–æ–≤–∏—Ö –¶–ë–û (–ø–æ –æ–¥–Ω—ñ–π –≤ —Ä—è–¥–∫—É)')
    split_criteria = fields.Selection([
        ('by_budget_type', '–ü–æ —Ç–∏–ø–∞—Ö –±—é–¥–∂–µ—Ç—ñ–≤'),
        ('by_department', '–ü–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª–∞—Ö'),
        ('by_geography', '–ü–æ –≥–µ–æ–≥—Ä–∞—Ñ—ñ—ó'),
        ('manual', '–†—É—á–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª')
    ], '–ö—Ä–∏—Ç–µ—Ä—ñ–π —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è', default='manual')

    # –ú–∞—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    update_fields = fields.Selection([
        ('responsible_users', '–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ'),
        ('cbo_types', '–¢–∏–ø–∏ –¶–ë–û'),
        ('budget_levels', '–†—ñ–≤–Ω—ñ –±—é–¥–∂–µ—Ç—É–≤–∞–Ω–Ω—è'),
        ('sequences', '–ü–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ'),
        ('all', '–í—Å—ñ –ø–æ–ª—è')
    ], '–ü–æ–ª—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è')

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
    preserve_budgets = fields.Boolean('–ó–±–µ—Ä–µ–≥—Ç–∏ –±—é–¥–∂–µ—Ç–∏', default=True)
    create_backup = fields.Boolean('–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é', default=True)
    send_notifications = fields.Boolean('–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è', default=True)

    # –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
    preview_changes = fields.Text('–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–º—ñ–Ω', readonly=True)
    validation_errors = fields.Text('–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó', readonly=True)

    @api.onchange('operation_type', 'source_cbo_id', 'target_parent_id')
    def _onchange_operation_params(self):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–º—ñ–Ω"""
        self._validate_operation()
        self._generate_preview()

    def _validate_operation(self):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
        errors = []

        if self.operation_type == 'move_subtree':
            if not self.source_cbo_id:
                errors.append("–û–±–µ—Ä—ñ—Ç—å –¶–ë–û –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è")
            elif not self.target_parent_id:
                errors.append("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –¶–ë–û")
            elif self.source_cbo_id == self.target_parent_id:
                errors.append("–¶–ë–û –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±–∞—Ç—å–∫–æ–º —Å–∞–º–æ–≥–æ —Å–µ–±–µ")
            elif self._would_create_cycle():
                errors.append("–û–ø–µ—Ä–∞—Ü—ñ—è —Å—Ç–≤–æ—Ä–∏—Ç—å —Ü–∏–∫–ª—ñ—á–Ω—É –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å")

        elif self.operation_type == 'merge_nodes':
            if not self.primary_cbo_id:
                errors.append("–û–±–µ—Ä—ñ—Ç—å –æ—Å–Ω–æ–≤–Ω–∏–π –¶–ë–û")
            elif not self.secondary_cbo_ids:
                errors.append("–û–±–µ—Ä—ñ—Ç—å –¶–ë–û –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è")
            elif self.primary_cbo_id in self.secondary_cbo_ids:
                errors.append("–û—Å–Ω–æ–≤–Ω–∏–π –¶–ë–û –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤ —Å–ø–∏—Å–∫—É –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è")

        elif self.operation_type == 'split_node':
            if not self.split_cbo_id:
                errors.append("–û–±–µ—Ä—ñ—Ç—å –¶–ë–û –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è")
            elif not self.new_cbo_names:
                errors.append("–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤–∏ –Ω–æ–≤–∏—Ö –¶–ë–û")

        self.validation_errors = '\n'.join(errors) if errors else False

    def _would_create_cycle(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª—ñ—á–Ω—É –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å"""
        if not self.source_cbo_id or not self.target_parent_id:
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ target_parent –Ω–µ —î –Ω–∞—â–∞–¥–∫–æ–º source
        current = self.target_parent_id
        while current:
            if current == self.source_cbo_id:
                return True
            current = current.parent_id
        return False

    def _generate_preview(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–º—ñ–Ω"""
        if self.validation_errors:
            self.preview_changes = "‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó"
            return

        preview_lines = []

        if self.operation_type == 'move_subtree' and self.source_cbo_id and self.target_parent_id:
            affected_count = 1 + len(self.source_cbo_id.get_descendants())
            budget_count = sum((self.source_cbo_id | self.source_cbo_id.get_descendants()).mapped('budget_count'))

            preview_lines.extend([
                f"üîÑ –ü–ï–†–ï–ú–Ü–©–ï–ù–ù–Ø –ü–Ü–î–î–ï–†–ï–í–ê:",
                f"‚Ä¢ –î–∂–µ—Ä–µ–ª–æ: {self.source_cbo_id.name}",
                f"‚Ä¢ –ù–æ–≤–∏–π –±–∞—Ç—å–∫–æ: {self.target_parent_id.name}",
                f"‚Ä¢ –ë—É–¥–µ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ: {affected_count} –¶–ë–û",
                f"‚Ä¢ –ë—É–¥–µ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ: {budget_count} –±—é–¥–∂–µ—Ç—ñ–≤",
                "",
                f"üìä –ù–û–í–ê –°–¢–†–£–ö–¢–£–†–ê:",
                f"{self.target_parent_id.name}",
                f"  ‚îî‚îÄ‚îÄ {self.source_cbo_id.name} (–ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ)"
            ])

        elif self.operation_type == 'merge_nodes' and self.primary_cbo_id and self.secondary_cbo_ids:
            total_budgets = sum(self.secondary_cbo_ids.mapped('budget_count'))
            total_children = sum(self.secondary_cbo_ids.mapped('child_count'))

            preview_lines.extend([
                f"üîÄ –û–ë'–Ñ–î–ù–ê–ù–ù–Ø –í–£–ó–õ–Ü–í:",
                f"‚Ä¢ –û—Å–Ω–æ–≤–Ω–∏–π –¶–ë–û: {self.primary_cbo_id.name} (–∑–∞–ª–∏—à–∏—Ç—å—Å—è)",
                f"‚Ä¢ –î–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è: {', '.join(self.secondary_cbo_ids.mapped('name'))}",
                f"‚Ä¢ –ë—É–¥–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {total_budgets} –±—é–¥–∂–µ—Ç—ñ–≤",
                f"‚Ä¢ –ë—É–¥–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {total_children} –¥–æ—á—ñ—Ä–Ω—ñ—Ö –¶–ë–û",
                "",
                f"‚ö†Ô∏è –¶–ë–û –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è –±—É–¥—É—Ç—å –í–ò–î–ê–õ–ï–ù–Ü!"
            ])

        elif self.operation_type == 'split_node' and self.split_cbo_id and self.new_cbo_names:
            new_names = [name.strip() for name in self.new_cbo_names.split('\n') if name.strip()]

            preview_lines.extend([
                f"‚úÇÔ∏è –†–û–ó–î–Ü–õ–ï–ù–ù–Ø –í–£–ó–õ–ê:",
                f"‚Ä¢ –î–∂–µ—Ä–µ–ª–æ: {self.split_cbo_id.name}",
                f"‚Ä¢ –ù–æ–≤—ñ –¶–ë–û: {', '.join(new_names)}",
                f"‚Ä¢ –ö—Ä–∏—Ç–µ—Ä—ñ–π: {dict(self._fields['split_criteria'].selection)[self.split_criteria]}",
                f"‚Ä¢ –ë—é–¥–∂–µ—Ç—ñ–≤ –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É: {self.split_cbo_id.budget_count}",
                "",
                f"üìã –†–ï–ó–£–õ–¨–¢–ê–¢:",
                *[f"  ‚Ä¢ {name}" for name in new_names]
            ])

        self.preview_changes = '\n'.join(preview_lines) if preview_lines else "–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É"

    def action_execute_restructure(self):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—ó"""
        if self.validation_errors:
            raise UserError("–í–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º")

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó
        if self.create_backup:
            self._create_backup()

        try:
            if self.operation_type == 'move_subtree':
                self._execute_move_subtree()
            elif self.operation_type == 'merge_nodes':
                self._execute_merge_nodes()
            elif self.operation_type == 'split_node':
                self._execute_split_node()
            elif self.operation_type == 'optimize_structure':
                self._execute_optimize_structure()
            elif self.operation_type == 'bulk_update':
                self._execute_bulk_update()

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å
            if self.send_notifications:
                self._send_notifications()

            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': '–†–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
                    'message': '–û–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∞. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ä–µ–≤–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞.',
                    'type': 'success',
                    'sticky': True
                }
            }

        except Exception as e:
            raise UserError(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—ó: {str(e)}")

    def _execute_move_subtree(self):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –ø—ñ–¥–¥–µ—Ä–µ–≤–∞"""
        self.source_cbo_id.write({
            'parent_id': self.target_parent_id.id,
            'last_tree_update': fields.Datetime.now()
        })

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ
        self._update_sequences_after_move()

    def _execute_merge_nodes(self):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è –≤—É–∑–ª—ñ–≤"""
        primary = self.primary_cbo_id

        for secondary in self.secondary_cbo_ids:
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ –±—é–¥–∂–µ—Ç–∏
            if self.preserve_budgets:
                secondary.budget_plan_ids.write({'cbo_id': primary.id})

            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ –¥–æ—á—ñ—Ä–Ω—ñ –¶–ë–û
            secondary.child_ids.write({'parent_id': primary.id})

            # –û–±'—î–¥–Ω—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
            if secondary.responsible_user_id and not primary.responsible_user_id:
                primary.responsible_user_id = secondary.responsible_user_id

            # –í–∏–¥–∞–ª—è—î–º–æ –≤—Ç–æ—Ä–∏–Ω–Ω–∏–π –¶–ë–û
            secondary.unlink()

    def _execute_split_node(self):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –≤—É–∑–ª–∞"""
        source = self.split_cbo_id
        new_names = [name.strip() for name in self.new_cbo_names.split('\n') if name.strip()]

        created_cbos = []

        for name in new_names:
            new_cbo = source.copy({
                'name': name,
                'code': f"{source.code}_{len(created_cbos) + 1}" if source.code else f"SPLIT_{len(created_cbos) + 1}",
                'parent_id': source.parent_id.id,
                'budget_plan_ids': [(5, 0, 0)],  # –û—á–∏—â—É—î–º–æ –±—é–¥–∂–µ—Ç–∏
                'child_ids': [(5, 0, 0)]  # –û—á–∏—â—É—î–º–æ –¥–æ—á—ñ—Ä–Ω—ñ
            })
            created_cbos.append(new_cbo)

        # –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –±—é–¥–∂–µ—Ç–∏
        if self.preserve_budgets:
            self._distribute_budgets(source, created_cbos)

        # –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –¥–æ—á—ñ—Ä–Ω—ñ –¶–ë–û
        self._distribute_children(source, created_cbos)

        # –í–∏–¥–∞–ª—è—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –¶–ë–û
        source.unlink()

    def _distribute_budgets(self, source_cbo, target_cbos):
        """–†–æ–∑–ø–æ–¥—ñ–ª –±—é–¥–∂–µ—Ç—ñ–≤ –º—ñ–∂ –Ω–æ–≤–∏–º–∏ –¶–ë–û"""
        budgets = source_cbo.budget_plan_ids

        if self.split_criteria == 'by_budget_type':
            # –ì—Ä—É–ø—É—î–º–æ –ø–æ —Ç–∏–ø–∞—Ö –±—é–¥–∂–µ—Ç—ñ–≤
            budget_types = budgets.mapped('budget_type_id')
            for i, budget_type in enumerate(budget_types):
                target_cbo = target_cbos[i % len(target_cbos)]
                budgets.filtered(lambda b: b.budget_type_id == budget_type).write({
                    'cbo_id': target_cbo.id
                })
        else:
            # –†—ñ–≤–Ω–æ–º—ñ—Ä–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª
            for i, budget in enumerate(budgets):
                target_cbo = target_cbos[i % len(target_cbos)]
                budget.cbo_id = target_cbo.id

    def _distribute_children(self, source_cbo, target_cbos):
        """–†–æ–∑–ø–æ–¥—ñ–ª –¥–æ—á—ñ—Ä–Ω—ñ—Ö –¶–ë–û"""
        children = source_cbo.child_ids

        for i, child in enumerate(children):
            target_cbo = target_cbos[i % len(target_cbos)]
            child.parent_id = target_cbo.id

    def _execute_optimize_structure(self):
        """–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏"""
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–∏–ø–æ–≤–∏—Ö –ø—Ä–æ–±–ª–µ–º

        # 1. –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≥–ª–∏–±–æ–∫–æ—ó –≤–∫–ª–∞–¥–µ–Ω–æ—Å—Ç—ñ
        deep_nested = self.env['budget.responsibility.center'].search([('depth_level', '>', 5)])
        for cbo in deep_nested:
            # –ü—ñ–¥–Ω—ñ–º–∞—î–º–æ –Ω–∞ 2 —Ä—ñ–≤–Ω—ñ –≤–≥–æ—Ä—É
            if cbo.parent_id and cbo.parent_id.parent_id:
                cbo.parent_id = cbo.parent_id.parent_id

        # 2. –û–±'—î–¥–Ω–∞–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –ª–∏—Å—Ç–∫—ñ–≤ –∑ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–º–∏
        empty_leaves = self.env['budget.responsibility.center'].search([
            ('child_ids', '=', False),
            ('budget_count', '=', 0),
            ('cbo_type', 'not in', ['holding'])
        ])

        for leaf in empty_leaves:
            if leaf.parent_id and leaf.parent_id.child_count == 1:
                # –Ñ–¥–∏–Ω–∞ –¥–∏—Ç–∏–Ω–∞ –±–µ–∑ —Ñ—É–Ω–∫—Ü—ñ—ó - –≤–∏–¥–∞–ª—è—î–º–æ
                leaf.unlink()

    def _execute_bulk_update(self):
        """–ú–∞—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—ñ–≤"""
        cbos = self.env.context.get('active_ids', [])
        if not cbos:
            return

        cbo_records = self.env['budget.responsibility.center'].browse(cbos)

        if self.update_fields == 'sequences':
            cbo_records.action_bulk_update_tree_positions()
        elif self.update_fields == 'all':
            # –ú–∞—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤
            cbo_records._compute_budget_stats()
            cbo_records._compute_child_count()
            cbo_records._compute_depth_level()

    def _create_backup(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏"""
        backup_data = []
        all_cbos = self.env['budget.responsibility.center'].search([])

        for cbo in all_cbos:
            backup_data.append({
                'id': cbo.id,
                'name': cbo.name,
                'code': cbo.code,
                'parent_id': cbo.parent_id.id if cbo.parent_id else None,
                'cbo_type': cbo.cbo_type,
                'sequence': cbo.sequence
            })

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ attachment
        import json
        backup_json = json.dumps(backup_data, indent=2)

        self.env['ir.attachment'].create({
            'name': f'tree_backup_{fields.Datetime.now().strftime("%Y%m%d_%H%M%S")}.json',
            'type': 'binary',
            'datas': base64.b64encode(backup_json.encode('utf-8')),
            'res_model': 'tree.restructure.wizard',
            'res_id': self.id
        })

    def _update_sequences_after_move(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç–µ–π –ø—ñ—Å–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è"""
        if self.target_parent_id:
            children = self.target_parent_id.child_ids.sorted('name')
            for i, child in enumerate(children):
                child.sequence = (i + 1) * 10

    def _send_notifications(self):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –∑–º—ñ–Ω–∏"""
        affected_users = set()

        # –ó–±–∏—Ä–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫–∏—Ö –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏
        if hasattr(self, 'source_cbo_id') and self.source_cbo_id:
            if self.source_cbo_id.responsible_user_id:
                affected_users.add(self.source_cbo_id.responsible_user_id)

        if hasattr(self, 'target_parent_id') and self.target_parent_id:
            if self.target_parent_id.responsible_user_id:
                affected_users.add(self.target_parent_id.responsible_user_id)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        for user in affected_users:
            self.env['mail.activity'].create({
                'activity_type_id': self.env.ref('mail.mail_activity_data_todo').id,
                'user_id': user.id,
                'res_model': 'budget.responsibility.center',
                'res_id': getattr(self, 'source_cbo_id', self.env['budget.responsibility.center']).id,
                'summary': '–ó–º—ñ–Ω–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó',
                'note': f'–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—é –¥–µ—Ä–µ–≤–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å –≤–∞—à–∏—Ö –±—é–¥–∂–µ—Ç—ñ–≤ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ.'
            })

    def action_preview_only(self):
        """–¢—ñ–ª—å–∫–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –±–µ–∑ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"""
        self._validate_operation()
        self._generate_preview()

        return {
            'type': 'ir.actions.act_window',
            'res_model': 'tree.restructure.wizard',
            'res_id': self.id,
            'view_mode': 'form',
            'target': 'new',
            'context': {'preview_mode': True}
        }