# -*- coding: utf-8 -*-

from odoo import models, fields, api, _
from odoo.exceptions import UserError, ValidationError
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta


class BudgetCopyWizard(models.TransientModel):
    """Wizard –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—ñ–≤ –º—ñ–∂ –ø–µ—Ä—ñ–æ–¥–∞–º–∏"""
    _name = 'budget.copy.wizard'
    _description = '–ú–∞–π—Å—Ç–µ—Ä –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—ñ–≤'

    # –¶—ñ–ª—å–æ–≤–∏–π –±—é–¥–∂–µ—Ç
    target_budget_id = fields.Many2one('budget.plan', '–¶—ñ–ª—å–æ–≤–∏–π –±—é–¥–∂–µ—Ç', required=True)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
    copy_mode = fields.Selection([
        ('previous_period', '–ó –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É'),
        ('specific_period', '–ó –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É'),
        ('same_period_previous_year', '–ó –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É –º–∏–Ω—É–ª–æ–≥–æ —Ä–æ–∫—É'),
        ('template', '–ó —à–∞–±–ª–æ–Ω—É'),
        ('another_budget', '–ó —ñ–Ω—à–æ–≥–æ –±—é–¥–∂–µ—Ç—É')
    ], '–†–µ–∂–∏–º –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è', required=True, default='previous_period')

    # –î–∂–µ—Ä–µ–ª–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
    source_period_id = fields.Many2one('budget.period', '–ü–µ—Ä—ñ–æ–¥-–¥–∂–µ—Ä–µ–ª–æ')
    source_budget_id = fields.Many2one('budget.plan', '–ë—é–¥–∂–µ—Ç-–¥–∂–µ—Ä–µ–ª–æ')
    template_id = fields.Many2one('budget.template', '–®–∞–±–ª–æ–Ω')

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
    copy_amounts = fields.Boolean('–ö–æ–ø—ñ—é–≤–∞—Ç–∏ —Å—É–º–∏', default=True)
    copy_quantities = fields.Boolean('–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ', default=True)
    copy_descriptions = fields.Boolean('–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –æ–ø–∏—Å–∏', default=True)
    copy_categories = fields.Boolean('–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó', default=True)

    # –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è
    amount_adjustment_type = fields.Selection([
        ('none', '–ë–µ–∑ –∑–º—ñ–Ω'),
        ('percentage', '–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–µ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è'),
        ('fixed_amount', '–§—ñ–∫—Å–æ–≤–∞–Ω–∞ —Å—É–º–∞'),
        ('inflation', '–Ü–Ω–¥–µ–∫—Å–∞—Ü—ñ—è –Ω–∞ —ñ–Ω—Ñ–ª—è—Ü—ñ—é')
    ], '–ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è —Å—É–º', default='none')

    adjustment_value = fields.Float('–ó–Ω–∞—á–µ–Ω–Ω—è –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è', default=0.0,
                                    help="–ü—Ä–æ—Ü–µ–Ω—Ç (+/-) –∞–±–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Å—É–º–∞")
    inflation_rate = fields.Float('–†—ñ–≤–µ–Ω—å —ñ–Ω—Ñ–ª—è—Ü—ñ—ó (%)', default=5.0)

    # –§—ñ–ª—å—Ç—Ä–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
    filter_by_category = fields.Boolean('–§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö')
    category_ids = fields.Many2many('budget.category', string='–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è')

    min_amount = fields.Float('–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞')
    max_amount = fields.Float('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞')

    # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
    preview_mode = fields.Boolean('–†–µ–∂–∏–º –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É', default=False)
    copy_summary = fields.Text('–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è', readonly=True)

    @api.onchange('copy_mode', 'target_budget_id')
    def _onchange_copy_mode(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–∂–µ—Ä–µ–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∂–∏–º—É"""
        if not self.target_budget_id:
            return

        target = self.target_budget_id

        if self.copy_mode == 'previous_period':
            # –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä—ñ–æ–¥ —Ç–æ–≥–æ –∂ —Ç–∏–ø—É —Ç–∞ –¶–ë–û
            previous_period = self._find_previous_period(target.period_id)
            if previous_period:
                source_budget = self.env['budget.plan'].search([
                    ('period_id', '=', previous_period.id),
                    ('budget_type_id', '=', target.budget_type_id.id),
                    ('cbo_id', '=', target.cbo_id.id)
                ], limit=1)
                self.source_budget_id = source_budget
                self.source_period_id = previous_period

        elif self.copy_mode == 'same_period_previous_year':
            # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –º–∏–Ω—É–ª–æ–≥–æ —Ä–æ–∫—É
            previous_year_period = self._find_same_period_previous_year(target.period_id)
            if previous_year_period:
                source_budget = self.env['budget.plan'].search([
                    ('period_id', '=', previous_year_period.id),
                    ('budget_type_id', '=', target.budget_type_id.id),
                    ('cbo_id', '=', target.cbo_id.id)
                ], limit=1)
                self.source_budget_id = source_budget
                self.source_period_id = previous_year_period

    def _find_previous_period(self, current_period):
        """–ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É"""
        return self.env['budget.period'].search([
            ('date_end', '<', current_period.date_start)
        ], order='date_end desc', limit=1)

    def _find_same_period_previous_year(self, current_period):
        """–ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É –º–∏–Ω—É–ª–æ–≥–æ —Ä–æ–∫—É"""
        previous_year_start = current_period.date_start - relativedelta(years=1)
        previous_year_end = current_period.date_end - relativedelta(years=1)

        return self.env['budget.period'].search([
            ('date_start', '>=', previous_year_start - timedelta(days=15)),
            ('date_start', '<=', previous_year_start + timedelta(days=15)),
            ('date_end', '>=', previous_year_end - timedelta(days=15)),
            ('date_end', '<=', previous_year_end + timedelta(days=15))
        ], limit=1)

    def action_preview_copy(self):
        """–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è"""
        self.preview_mode = True
        lines_to_copy = self._get_source_lines()

        if not lines_to_copy:
            raise UserError('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ª—ñ–Ω—ñ–π –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–¥–∞–Ω–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏')

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_lines = len(lines_to_copy)
        total_amount = sum(self._calculate_adjusted_amount(line.planned_amount)
                           for line in lines_to_copy)

        categories = lines_to_copy.mapped('budget_category_id.name')
        categories_text = ', '.join(categories[:5])
        if len(categories) > 5:
            categories_text += f' —Ç–∞ —â–µ {len(categories) - 5}'

        self.copy_summary = f"""
üìã –ü–û–ü–ï–†–ï–î–ù–Ü–ô –ü–ï–†–ï–ì–õ–Ø–î –ö–û–ü–Ü–Æ–í–ê–ù–ù–Ø

üî¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –õ—ñ–Ω—ñ–π –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: {total_lines}
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø—ñ—Å–ª—è –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è: {total_amount:,.2f} —Ç—ã—Å.–≥—Ä–Ω
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó: {categories_text}

‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:
‚Ä¢ –†–µ–∂–∏–º: {dict(self._fields['copy_mode'].selection)[self.copy_mode]}
‚Ä¢ –ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è —Å—É–º: {dict(self._fields['amount_adjustment_type'].selection)[self.amount_adjustment_type]}
{f'‚Ä¢ –ó–Ω–∞—á–µ–Ω–Ω—è –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è: {self.adjustment_value}%' if self.amount_adjustment_type == 'percentage' else ''}

üéØ –¶—ñ–ª—å–æ–≤–∏–π –±—é–¥–∂–µ—Ç: {self.target_budget_id.name}
üìÖ –ü–µ—Ä—ñ–æ–¥: {self.target_budget_id.period_id.name}
üè¢ –¶–ë–û: {self.target_budget_id.cbo_id.name}
        """

        return {
            'type': 'ir.actions.act_window',
            'res_model': 'budget.copy.wizard',
            'res_id': self.id,
            'view_mode': 'form',
            'target': 'new',
            'context': {'preview_done': True}
        }

    def action_execute_copy(self):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è"""
        if not self.target_budget_id:
            raise UserError('–ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ü—ñ–ª—å–æ–≤–∏–π –±—é–¥–∂–µ—Ç')

        lines_to_copy = self._get_source_lines()

        if not lines_to_copy:
            raise UserError('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ª—ñ–Ω—ñ–π –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è')

        # –û—á–∏—â—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –ª—ñ–Ω—ñ—ó —Ü—ñ–ª—å–æ–≤–æ–≥–æ –±—é–¥–∂–µ—Ç—É (–æ–ø—Ü—ñ–π–Ω–æ)
        if self.env.context.get('clear_existing'):
            self.target_budget_id.line_ids.unlink()

        copied_lines = 0
        total_amount = 0

        for source_line in lines_to_copy:
            new_amount = self._calculate_adjusted_amount(source_line.planned_amount)

            line_vals = {
                'plan_id': self.target_budget_id.id,
                'planned_amount': new_amount,
            }

            # –ö–æ–ø—ñ—é—î–º–æ –ø–æ–ª—è –∑–≥—ñ–¥–Ω–æ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
            if self.copy_descriptions:
                line_vals['description'] = source_line.description
            if self.copy_categories:
                line_vals['budget_category_id'] = source_line.budget_category_id.id
                line_vals['cost_center_id'] = source_line.cost_center_id.id
            if self.copy_quantities:
                line_vals['quantity'] = source_line.quantity
                line_vals['unit_price'] = self._calculate_adjusted_amount(source_line.unit_price)

            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è
            line_vals.update({
                'account_id': source_line.account_id.id if source_line.account_id else False,
                'analytic_account_id': source_line.analytic_account_id.id if source_line.analytic_account_id else False,
                'calculation_method': source_line.calculation_method,
            })

            self.env['budget.plan.line'].create(line_vals)
            copied_lines += 1
            total_amount += new_amount

        # –î–æ–¥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –±—é–¥–∂–µ—Ç—É
        copy_info = f"–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ {copied_lines} –ª—ñ–Ω—ñ–π"
        if self.source_budget_id:
            copy_info += f" –∑ –±—é–¥–∂–µ—Ç—É {self.source_budget_id.name}"
        elif self.template_id:
            copy_info += f" –∑ —à–∞–±–ª–æ–Ω—É {self.template_id.name}"

        self.target_budget_id.message_post(
            body=copy_info,
            subject="–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç–Ω–∏—Ö –ª—ñ–Ω—ñ–π"
        )

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        self.copy_summary = f"""
‚úÖ –ö–û–ü–Ü–Æ–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:
‚Ä¢ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –ª—ñ–Ω—ñ–π: {copied_lines}
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_amount:,.2f} —Ç—ã—Å.–≥—Ä–Ω
‚Ä¢ –¶—ñ–ª—å–æ–≤–∏–π –±—é–¥–∂–µ—Ç: {self.target_budget_id.name}

üîÑ –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:
1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
2. –í–Ω–µ—Å—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è
3. –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –±—é–¥–∂–µ—Ç –Ω–∞ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        """

        return {
            'type': 'ir.actions.act_window',
            'name': '–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∏–π –±—é–¥–∂–µ—Ç',
            'res_model': 'budget.plan',
            'res_id': self.target_budget_id.id,
            'view_mode': 'form',
            'target': 'current'
        }

    def _get_source_lines(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª—ñ–Ω—ñ–π –¥–∂–µ—Ä–µ–ª–∞ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è"""
        lines = self.env['budget.plan.line']

        if self.copy_mode == 'template' and self.template_id:
            # –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∑ —à–∞–±–ª–æ–Ω—É - —Å—Ç–≤–æ—Ä—é—î–º–æ –ª—ñ–Ω—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —à–∞–±–ª–æ–Ω—É
            template_lines = self.template_id.line_ids
            return template_lines  # –ü–æ—Ç—Ä—ñ–±–Ω–∞ –æ–∫—Ä–µ–º–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è —à–∞–±–ª–æ–Ω—ñ–≤
        elif self.source_budget_id:
            lines = self.source_budget_id.line_ids
        else:
            return lines

        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
        if self.filter_by_category and self.category_ids:
            lines = lines.filtered(lambda l: l.budget_category_id.id in self.category_ids.ids)

        if self.min_amount > 0:
            lines = lines.filtered(lambda l: l.planned_amount >= self.min_amount)

        if self.max_amount > 0:
            lines = lines.filtered(lambda l: l.planned_amount <= self.max_amount)

        return lines

    def _calculate_adjusted_amount(self, original_amount):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–æ—Ä–∏–≥–æ–≤–∞–Ω–æ—ó —Å—É–º–∏"""
        if not self.copy_amounts or self.amount_adjustment_type == 'none':
            return original_amount

        if self.amount_adjustment_type == 'percentage':
            return original_amount * (1 + self.adjustment_value / 100)
        elif self.amount_adjustment_type == 'fixed_amount':
            return original_amount + self.adjustment_value
        elif self.amount_adjustment_type == 'inflation':
            return original_amount * (1 + self.inflation_rate / 100)

        return original_amount